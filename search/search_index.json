{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenido al Repositorio de Pr\u00e1cticas de Despliegue de Aplicaciones Web! \ud83c\udf89","text":"<p>En este espacio encontrar\u00e1s una colecci\u00f3n de pr\u00e1cticas y recursos de la asignatura de despliegue de aplicaciones web. Aqu\u00ed ire publicando una serie de, ejercicios pr\u00e1cticos asignados por el profesor durante las clases.</p>"},{"location":"#que-encontraras-aqui","title":"\u00bfQu\u00e9 encontrar\u00e1s aqu\u00ed?","text":"<ul> <li>Pr\u00e1cticas Evaluables: Ejercicios para que puedas seguir el proceso de despliegue de manera estructurada.</li> <li>Recursos \u00fatiles: Documentaci\u00f3n y enlaces.</li> </ul>"},{"location":"#objetivo","title":"Objetivo","text":"<p>El prop\u00f3sito de este material es que, al finalizar el curso, pueda manejar con confianza el despliegue de aplicaciones web en distintos entornos, ya sea en servidores locales, plataformas en la nube o servicios de hosting especializados.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/","title":"Pr\u00e1ctica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web Nginx","text":"<p>Para instalar el servidor web Nginx en nuestra m\u00e1quina primero deberemos actualizar los repositorios. Tras esto instalaremos nginx con los siguientes comandos:</p> <pre><code>sudo apt update\nsudo apt install Nginx\n</code></pre> <p>Comprobamos si se ha instalado bien Nginx con el siguiente comando:</p> <pre><code>systemctl status nginx\n</code></pre> <p>En la consola deber\u00eda de salir lo siguiente, si saliera verde y mostrara que est\u00e1 activado entonces nginx est\u00e1 instalado correctamente.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#creacion-de-la-carpeta-del-sitio-web","title":"Creaci\u00f3n de la carpeta del sitio web","text":"<p>Al igual que en Apache, todos los archivos que formaran parte de una web se organizaran en carpetas.</p> <p>Estas carpetas, t\u00edpicamente est\u00e1n dentro de <code>/var/www/</code></p> <p>Por lo tanto, crearemos la carpeta de nuestro sitio web, en este caso lo llamaremos Practica2-1:</p> <pre><code>sudo mkdir -p /var/www/nombre_web/html\n</code></pre> <p>Dentro de la carpeta html que hemos creado clonaremos el siguiente repositorio:</p> <pre><code>https://github.com/cloudacademy/static-website-example\n</code></pre> <p>Clonar direcci\u00f3n</p> <pre><code>Para clonar ese repositorio necesitaras tener instalado git en tu equipo, para esto\nusaras el comando ```sudo apt install git``` y posteriormente ```git clone url_repo```\npara poder clonar el repositorio\n</code></pre> <p>Adem\u00e1s, haremos que el propietario de esta carpeta y todo lo que haya dentro sea el usuario <code>www-data</code> normalmente este es el usuario del servicio web</p> <pre><code>sudo chown -R www-data:www-data /var/www/nombre_web/html\n</code></pre> <p>Y le daremos los permisos adecuados para que no nos d\u00e9 un error de acceso no autorizado al entrar en el sitio web: </p> <pre><code>sudo chmod -R 755 /var/www/nombre_web\n</code></pre> <p>Si hemos seguido bien estos pasos al hacer un <code>ls -l /var/www/nombre_web</code> podremos observar que est\u00e1 bien.</p> <p></p> <p>Por \u00faltimo para comprobar que todo est\u00e1 funcionando correctamente nos conectaremos a la web desde nuestro ordenador para esto en el navegador pondremos la siguiente direcci\u00f3n:</p> <pre><code>http://ip-m\u00e1quina-virtual\n</code></pre> <p>Si hemos conseguido conectarnos el navegador mostrar\u00e1 la p\u00e1gina web alojada en el servidor, lo que ser\u00eda algo asi.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX","text":"<p>Tras haber completado los pasos anteriores debemos saber que en NGINX existen 2 rutas importantes. La primera es <code>sites-availabe</code>, la cual contiene los archivos de configuraci\u00f3n de los sitios web que alberga nuestro servidor. La segunda es <code>sites-enabled</code>, la cual se parece a la anterior con la diferencia de que contiene los archivos de los sitios web que est\u00e1n habilitados, es decir que funcionan en este momento.</p> <p>Dentro de la carpeta <code>sites-availabe</code> hay un archivo de configuraci\u00f3n por defecto llamado default, que es la p\u00e1gina que se muestra por defecto al entrar al servidor sin indicar ning\u00fan tipo de sitio web.</p> <p>Para que NGINX presente el contenido de nuestra web, ser\u00e1 necesario crear un bloque de servidor con las directivas correctas. Por lo t\u00e1nto crearemos un archivo nuevo en <code>/etc/nginx/sites-availabe/nombre-de-tu-web</code>.</p> <pre><code>sudo nano /etc/nginx/sites-availabe/nombre-de-tu-web\n</code></pre> <p>Y este ser\u00e1 el contenido del archivo </p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>La directiva root debe ir seguida de la ruta absoluta d\u00f3nde se encuentre el archivo index.html de nuestra p\u00e1gina web. En mi caso es <code>/var/www/practica2-1/html</code> y se ver\u00eda algo asi:</p> <p></p> <p></p> <p>Por \u00faltimo crearemos un enlace simb\u00f3lico entre este archivo y la ruta de los sitios que est\u00e1n habilitados.</p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/\n</code></pre> <p>Tras esto haremos ejecutaremos el comando <code>ls -l /etc/nginx/sites-enabled/</code> y nos deber\u00e1 salir el enlace simb\u00f3lico.</p> <p></p> <p>Por \u00faltimo reiniciaremos el servidor para que se aplique la configuraci\u00f3n</p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#comprobaciones","title":"Comprobaciones","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#comprobacion-correcto-funcionamiento","title":"Comprobaci\u00f3n correcto funcionamiento","text":"<p>Como no contamos con un servidor DNS para que nos traduzca las ips, deberemos hacerlo manualmente. Por lo t\u00e1nto editaremos el archivo <code>/etc/hosts</code> de nuestro ordenador para que la IP quede asociada a la m\u00e1quina virtual, nuestra directriz <code>server_name</code>.</p> <p>En mi caso al usar Linux el archivo se encuentra en <code>/etc/hosts</code>, aunque si el sistema operativo fuese windows no habr\u00eda problema, ya que la ruta del archivo en ese caso es <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p> <p>Al archivo le a\u00f1adiremos la siguiente l\u00ednea:</p> <pre><code>IP_SERVIDOR nombre_web\n</code></pre> <p>Tras haberla a\u00f1adido deber\u00eda verse algo as\u00ed:</p> <p></p> <p>Si hemos seguido todos estos pasos y no se ha producido un error, al introducir <code>http://practica2-1</code> en el navegador de nuestra m\u00e1quina anfitriona este nos mostrara la p\u00e1gina web alojada en nuestro servidor.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#comprobar-registros-del-servidor","title":"Comprobar registros del servidor","text":"<p>Comprobad que las peticiones se est\u00e1n registrando correctamente en los archivos de logs, tanto las correctas como las err\u00f3neas:</p> <ul> <li><code>/var/log/nginx/acces.log</code>: Cada solicitud al servidor web se registra en este archivo. A no ser que Nginx este configurado para hacer algo diferente.</li> <li><code>/var/log/nginx/error.log</code>: Aqu\u00ed queda registrado cada error de Nginx.</li> </ul> <p>Y como podemos observar en acces.log ya han quedado registradas las solicitudas para conectarnos</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#ftp","title":"FTP","text":"<p>El FTP es un protocolo de transferencias de archivos entre sistemas. Como su nombre indica File Transfer Protocol(FTP) es un protocolo que permite la transferencia de archivos directamente entre 2 sistemas. \u00daltimamente, es un protocolo que se encuentra en desuso.</p> <p>El protocolo FTP en s\u00ed es un protocolo inseguro, pues su informaci\u00f3n no viaja cifrada. Sin embargo, esto se solucion\u00f3 en 2001, con el protocolo SFTP, que le a\u00f1ade una capa de SSH para hacerlo m\u00e1s seguro y privado. Por lo t\u00e1nto SFTP es lo mismo que FTP pero implementando un canal seguro.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#configurar-servidor-sftp-debian","title":"Configurar Servidor SFTP Debian","text":"<p>En primer lugar instal\u00e1remos con los siguientes comandos:</p> <pre><code>sudo apt-get update\nsudo apt-get install vsftpd\n</code></pre> <p>Tras instalarlo crearemos una carpeta en la siguiente ruta <code>/home/usuario/ftp</code> con el siguiente comando:</p> <pre><code>mkdir /home/nombre_usuario/ftp\n</code></pre> <p>Ahora crearemos los certificados de seguridad necesarios para aportar la capa de seguridad a nuestra conexi\u00f3n</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre> <p>Tras introducir este comando nos saldr\u00e1 algo asi:</p> <p></p> <p>Una vez realizados estos pasos, procederemos a realizar la configuraci\u00f3n de VSFTPD. Es muy simple y solamente necesitaremos editar el archivo de configuraci\u00f3n del servicio.</p> <pre><code>sudo nano /etc/vsftpd.conf\n</code></pre> <p>En primer l\u00fagar buscaremos las siguientes l\u00edneas y las borraremos.</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p>Tras esto a\u00f1adiremos las siguientes en su lugar:</p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n\nlocal_root=/home/nombre_usuario/ftp\n</code></pre> <p>Siendo local_root la ruta absoluta a la carpeta que creamos anteriormente en nuestro usuario, se ver\u00eda algo asi:</p> <p></p> <p>Tras guardar los cambios reiniciaremos el servicio para que se apliquen.</p> <pre><code>sudo systemctl restart --now vsftpd\n</code></pre> <p>Por \u00faltimo realizaremos un status para comprobar que el servicio est\u00e1 funcionando correctamente</p> <pre><code>sudo systemctl status vsftpd\n</code></pre> <p>Y tendr\u00eda que salir algo as\u00ed:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#comprobacion-correcto-funcionamiento-ftp","title":"Comprobaci\u00f3n correcto funcionamiento FTP","text":"<p>Tras haber completado todos estos pasos ya podemos conectarnos al servidor mediante FTP mediante un cliente adecuado. En este caso usaremos Filezilla, la cual es una aplicaci\u00f3n FTP libre y de c\u00f3digo abierto.</p> <p>La conexi\u00f3n se puede realizar de dos formas:</p> <ul> <li> <p>Mediante el puerto por defecto del protocolo inseguro FTP, el 21, pero utilizando certificados que cifran el intercambio de datos convirti\u00e9ndolo as\u00ed en seguro</p> </li> <li> <p>Haciendo uso del protocolo SFTP, dedicado al intercambio de datos mediante una conexi\u00f3n similar a SSH, utilizando de hecho el puerto 22.</p> </li> </ul> <p>Para esto abriremos Filezilla e introduciremos los datos necesarios para realizar la conexi\u00f3n.</p> <p></p> <ul> <li>La IP de nuestra m\u00e1quina virtual en el apartado de servidor.</li> <li>El nombre de usuario de nuestra m\u00e1quina virtual en el apartado Nombre de usuario.</li> <li>La contrase\u00f1a de ese usuario en el apartado contrase\u00f1a.</li> <li>El puerto de conexi\u00f3n, que ser\u00e1 el 21 para conectarnos utilizando los certificados generados previamente en el apartado puerto.</li> </ul> <p>Durante la conexi\u00f3n filezilla nos avisar\u00e1 de que el certificado es desconocido, le daremos a aceptar, ya que no es peligro pu\u00e9s lo hemos generado nosotros mismos:</p> <p></p> <p>Tras haber establecido la conexi\u00f3n nos conectaremos autom\u00e1ticamente a la carpeta <code>/home/acoronado/ftp</code> de la m\u00e1quina virtual</p> <p>Si lo que quisi\u00e9ramos conectarnos por SFTP ser\u00eda el mismo proceso, solo que el puerto ser\u00eda el puerto 22</p> <p>Al conectarnos Filezilla nos tambi\u00e9n nos avisar\u00e1 sobre la clave desconocida, le daremos aceptar y ya tendremos acceso al servidor mediante SFTP</p> <p></p> <p>Posteriorm\u00e9nte buscamos la carpeta de nuestro ordenador donde hemos creado un archivo .txt de prueba(en la parte izquierda de la pantalla) y en la parte derecha de la pantalla, buscaremos la carpeta donde queremos subirla. Con un doble clic o arrastrando el archivo hacia la derecha, subiremos una copia al servidor.</p> <p></p> <p>Y como podemos ver al hacer un <code>ls -l /home/acoronado/ftp</code> podemos ver que el archivo est\u00e1 en la m\u00e1quina virtual</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#https","title":"HTTPS","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#configuracion-https-para-nginx","title":"Configuraci\u00f3n HTTPS para NGINX","text":"<p>En este apartado le a\u00f1adiremos a nuestro servidor una capa de seguridad necesaria. Haremos que todos nuestros sitios web alojados hagan uso de certificados SSL y se acceda a ellos por medio de HTTPS.</p> <p>Para esto primero tendremos que generar un clave SSL con el siguiente comando, esta opci\u00f3n solo es v\u00e1lida si solo necesitas cifrado sin preocuparte por las advertencias de los navegadores sobre la validez del certificado:</p> <pre><code>mkdir /etc/nginx/ssl\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/tu_dominio.key -out /etc/nginx/ssl/tu_dominio.crt\n</code></pre> <p>Y se ver\u00e1 as\u00ed tras generar la clave:</p> <p></p> <p>Tras esto deberemos ir al archivo de configuraci\u00f3n de nuestro sitio ubicado en <code>/etc/nginx/sites-availabe/practica2-1</code> donde cambiaremos algunos bloques para que se use el protocolo HTTPS.</p> <pre><code>sudo nano /etc/nginx/sites-available/practica2-1\n</code></pre> <p>En donde a\u00f1adiremos el siguiente bloque server</p> <pre><code>server {\n    listen 443 ssl;\n    server_name tu_dominio.com www.tu_dominio.com;\n\n    ssl_certificate /etc/nginx/ssl/tu_dominio.crt;\n    ssl_certificate_key /etc/nginx/ssl/tu_dominio.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    # Resto de configuraci\u00f3n del servidor, como root, index, location blocks...\n    root /var/www/tu_dominio.com/html;\n    index index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>Si queremos forzar que todas las peticiones http se redirijan a https deberemos a\u00f1adir el siguiente bloque server</p> <pre><code>server {\n    listen 80;\n    server_name tu_dominio.com www.tu_dominio.com;\n\n    return 301 https://$host$request_uri;\n}\n</code></pre> <p>Tras esto reiniciaremos nginx con:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Y revisaremos su estado:</p> <pre><code>sudo systemctl status nginx\n</code></pre> <p>Deber\u00eda aparecernos as\u00ed:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.1/#comprobaciones-https","title":"Comprobaciones HTTPS","text":"<p>Por \u00faltimo comprobaremos que podemos conectarnos desde nuestra maquina anfitriona para esto en el navegador pondremos <code>https://practica2-1</code></p> <p>Al intentar acceder firefox nos avisar\u00e1 de que el certificado de seguridad no es v\u00e1lido, y que se trata de una clave autofirmada. Pero como lo hemos generado nosotros no hay problema solo deberemos darle ha avanzado y continuar.</p> <p></p> <p>Tras esto nos mostrara la pagina:</p> <p></p> <p>Para finalizar introduciremos en el navegador <code>http://practica2-1</code> para comprobar que el servidor nos redirige a HTTPS. Si todo est\u00e1 bien, nos mostrar\u00e1 el mismo aviso anterior y nos redirija a la p\u00e1gina usando el protocolo https</p> <p>Alumno: Coronado Ortega, Alejandro</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/","title":"Pr\u00e1ctica 2.2 \u2013 Autenticaci\u00f3n en Nginx","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n</p> <ul> <li>No iniciar esta practica hasta haber completado la pr\u00e1ctica2.1</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#introduccion","title":"Introducci\u00f3n","text":"<p>En el contexto de una transacci\u00f3n HTTP, la autenticaci\u00f3n de acceso b\u00e1sica es un m\u00e9todo dise\u00f1ado para permitir a un navegador web, u otro programa cliente, proveer credenciales en la forma de usuario y contrase\u00f1a cuando se le solicita una p\u00e1gina al servidor.</p> <p>La autenticaci\u00f3n b\u00e1sica, como su nombre lo indica, es la forma m\u00e1s b\u00e1sica de autenticaci\u00f3n disponible para las aplicaciones Web. Fue definida por primera vez en la especificaci\u00f3n HTTP en s\u00ed y no es de ninguna manera elegante, pero cumple su funci\u00f3n.</p> <p>Este tipo de autenticaci\u00f3n es el tipo m\u00e1s simple disponible p\u00e9ro adolece de importantes problemas de seguridad que no la hacen recomendable en muchas situaciones. No requiere el uso ni de cookies, ni de identificadores de sesi\u00f3n, ni de p\u00e1gina de ingreso. </p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#paquetes-necesarios","title":"Paquetes necesarios","text":"<p>Para esta pr\u00e1ctica vamos a necesitar openssl para la creaci\u00f3n de las claves.</p> <p>Para estar seguros listaremos las aplicaciones instaladas y mostraremos solo openssl, con el siguiente comando:</p> <pre><code>dpkg -l | grep openssl\n</code></pre> <p>En caso de no tenerlo, lo instalaremos con el siguiente comando</p> <pre><code>sudo apt install openssl\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web","text":"<p>Para la creaci\u00f3n de usuarios y contrase\u00f1as necesitaremos crear un archivo oculto llamado \".htpasswd\" en el directorio de configuraci\u00f3n /etc/nginx donde  guardaremos nuestros usuarios y contrase\u00f1as.</p> <p>A continuaci\u00f3n crearemos 2 usuarios, uno con tu nombre de usuario y otro con tu primer apellido con los siguientes comandos:</p> <pre><code>sudo sh -c \"echo -n 'vuestro_nombre:' &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p>Se ver\u00eda as\u00ed:</p> <p></p> <p></p> <p>Y para la creaci\u00f3n de la contrase\u00f1a,</p> <pre><code>sudo sh -c \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p></p> <p></p> <p>Este proceso se podr\u00e1 repetir para tantos usuarios como haga falta.</p> <ul> <li>Para comprobar que el usuario y la contrase\u00f1a aparecen cifrados en el fichero deberemos introducir el siguiente comando:</li> </ul> <pre><code>cat /etc/nginx/.htpasswd\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica","text":"<p>Para configurar el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica editaremos la configuraci\u00f3n del server block sobre el cual queremos aplicar la restricci\u00f3n de acceso:</p> <pre><code>sudo nano /etc/nginx/sites-available/nombre_web\n</code></pre> <p>Lo primero ser\u00e1 decidir qu\u00e9 recursos estar\u00e1n protegidos. Nginx permite a\u00f1adir restricciones a nivel de servidor o en un location (directorio o archivo) espec\u00edfico. Para nuestro ejemplo inicial vamos a proteger la ra\u00edz, la p\u00e1gina principal de nuestro sitio.</p> <p>Utilizaremos la directiva <code>auth_basic</code> dentro del location y le pondremos el nombre a nuestro dominio  que ser\u00e1 mostrado al usuario al solicitar las credenciales. Por \u00faltimo, configuramos Nginx para que utilice el fichero que previamente hemos creado con la <code>directiva auth_basic_user_file</code> : </p> <pre><code>    location / {\n    auth_basic  \"\u00c1rea restringida\";\n    auth_basic_user_file    /etc/nginx/.htpasswd;\n        try_files $uri $uri/ =404;\n    }\n</code></pre> <p>En nuestro caso al tener configurado el sitio web con https a\u00f1adiremos este bloque en el apartado de https, ya que http, se encarga de reenviar autom\u00e1ticamente la petici\u00f3n a https:</p> <p></p> <p>Una vez terminada la configuraci\u00f3n deberemos reiniciar el servicio para que se aplique la nueva configuraci\u00f3n:</p> <pre><code>sudo systemctl restart nginx.service\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n","text":"<p>Comprobaci\u00f3n 1</p> <p>Comprueba desde tu m\u00e1quina f\u00edsica/anfitri\u00f3n que puedes acceder a <code>http://nombre-sitio-web</code> y que se te solicita autenticaci\u00f3n</p> <ul> <li>Para esto abriremos una ventana de navegaci\u00f3n e intentaremos acceder a la web y como podemos ver solicita la autenticaci\u00f3n</li> </ul> <p></p> <p>Comprobaci\u00f3n 2</p> <p>Comprueba que si decides cancelar la autenticaci\u00f3n, se te negar\u00e1 el acceso al sitio con un error. \u00bfQu\u00e9 error es?</p> <ul> <li>S\u00ed cancelamos la autenticaci\u00f3n, saldr\u00e1 el error 401 Authorization Required</li> </ul> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#tareas","title":"Tareas","text":"<p>Tarea1</p> <ul> <li> <p>Intenta entrar primero con un usuario err\u00f3neo y luego con otro correcto. Puedes ver todos los sucesos y registros en los logs access.log y error.log</p> </li> <li> <p>Adjunta una captura de pantalla de los logs donde se vea que intentas entrar primero con un usuario inv\u00e1lido y con otro v\u00e1lido. Indica d\u00f3nde podemos ver los errores de usuario inv\u00e1lido o no encontrado, as\u00ed como donde podemos ver el n\u00famero de error que os aparec\u00eda antes</p> </li> </ul> <ul> <li>Primero intentamos entrar con un usuario llamado pepe p\u00e9ro este al ser err\u00f3neo no nos deja acceder quedan reflejados en ambos .log     posteriormente si intentamos acceder con el usuario correcto si nos dejara.</li> </ul> <p></p> <p></p> <p>Tarea2</p> <p>Borra las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade un nuevo location debajo con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente. </p> <ul> <li>Para esto borraremos las l\u00edneas que hace referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz, tras ello a\u00f1adiremos el siguiente bloque</li> </ul> <pre><code>location /contact.html {\n    auth_basic  \"\u00c1rea restringida\";\n    auth_basic_user_file    /etc/nginx/.htpasswd;\n}\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":"<p>La autenticaci\u00f3n b\u00e1sica HTTP puede ser combinada de forma efectiva con la restricci\u00f3n de acceso por direcci\u00f3n IP. Se pueden implementar dos escenarios:</p> <pre><code>Un usuario debe estar ambas cosas, autenticado y tener una IP v\u00e1lida\n\nUn usuario debe o bien estar autenticado, o bien tener una IP v\u00e1lida\n</code></pre> <p>Veamos c\u00f3mo lo har\u00edamos:</p> <pre><code>Como permitir o denegar acceso sobre una IP concreta (directivas **allow** y **deny**, respectivamente). Dentro del block server o archivo de configuraci\u00f3n del dominio web:\n</code></pre> <p><pre><code>location /api {\n    deny 192.168.1.2;\n    allow 192.168.1.1/24;\n    allow 127.0.0.1;\n    deny all;\n}\n</code></pre> El acceso se garantizar\u00e1 a la IP 192.168.1.1/24, excluyendo a la direcci\u00f3n 192.168.1.2.</p> <p>Hay que tener en cuenta que las directivas allow y deny se ir\u00e1n aplicando en el orden en el que aparecen el archivo.</p> <p>Aqu\u00ed aplican sobre la location /api (esto es solo un ejemplo de un hipot\u00e9tico directorio o archivo), pero podr\u00edan aplicar sobre cualquiera, incluida todo el sitio web, la location ra\u00edz /.</p> <p>La \u00faltima directiva deny all quiere decir que por defecto denegaremos el acceso a todo el mundo. Por eso hay que poner los allow y deny m\u00e1s espec\u00edficos justo antes de esta, porque al evaluarse en orden de aparici\u00f3n, si los pusi\u00e9ramos debajo se denegar\u00eda el acceso a todo el mundo, puesto que deny all ser\u00eda lo primero que se evaluar\u00eda.</p> <p>Combinar la restricci\u00f3n IP y la autenticaci\u00f3n HTTP con la directiva satisfy.</p> <p>Si establecemos el valor de la directiva a \u201call\u201d, el acceso se permite si el cliente satisface ambas condiciones (IP y usuario v\u00e1lido). Si lo establecemos a \u201cany\u201d, el acceso se permite si se satisface al menos una de las dos condiciones.</p> <pre><code>location/api{\n    satisfy all;\n\n    deny 192.168.1.2;\n    allow 192.168.1.1/24;\n    allow 127.0.0.1;\n    deny all;\n\n    auth_basic  \"Administrator's Area';\n    auth_basic_usr_file conf/htpasswd;\n}\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#tareas_1","title":"Tareas","text":"<p>Tarea 1</p> <p>Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Modifica su server block o archivo de configuraci\u00f3n. Comprueba como se deniega el acceso: </p> <p>Para denegar el acceso a nuestra maquina anfitriona modificar\u00edamos el bloque <code>location /</code> quedando as\u00ed:</p> <pre><code>location / {\n    deny 192.168.116.131/24;\n\n    try_files $uri $uri/ =404;\n}\n</code></pre> <p>Al intentar acceder desde el navegador nos mostrar\u00e1 este error:</p> <p></p> <p>Y en error.log quedar\u00eda reflejado as\u00ed:</p> <p></p> <p>Tarea2</p> <p>Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que s\u00ed puede acceder sin problemas</p> <p>Para conseguir esto modificaremos el bloque <code>location /{}</code> para que nuestra ip sea v\u00e1lida y un usuario v\u00e1lido</p> <pre><code>location / {\n    satisfy all;\n\n    allow 192.168.116.131/24;\n    deny all;\n\n    auth_basic  \"\u00c1rea restringida\";\n    auth_basic_user_file    /etc/nginx/.htpasswd;\n    try_files $uri $uri/ =404;\n}\n</code></pre> <p>Tras esto intentaremos acceder a nuestra web y como podemos ver nos deja.</p> <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.2/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n    #...\n    satisfy all;    \n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n    deny  all;\n    auth_basic \"Cuesti\u00f3n final 1\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <ul> <li>No podr\u00e9 acceder, ya que a pesar de que mi IP est\u00e1 permitida, al no introducir bien el usuario y tener la directiva satisfy all no cumplo los requisitos</li> </ul> <p>Cuesti\u00f3n 2</p> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n    #...\n    satisfy all;    \n    deny  all;\n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 2: The revenge\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <ul> <li>No podr\u00e9 acceder, ya que mi IP no est\u00e1 permitida, pues la configuraci\u00f3n cuenta con una directiva para denegar mi acceso.</li> </ul> <p>Cuesti\u00f3n 3</p> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n    #...\n    satisfy any;    \n    deny  172.1.10.6;\n    deny 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 3: The final combat\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <ul> <li>Si podr\u00e9 acceder, ya que a pesar de que IP no est\u00e1 permitida, la configuraci\u00f3n cuenta con la directiva satisfy any, entonces al introducir el usuario correctamente cumplo los requisitos para establecer la conexi\u00f3n.</li> </ul> <p>Cuesti\u00f3n 4</p> <p>A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yo</p> <p>Supongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:Proyectos</p> <p>Completa la configuraci\u00f3n para conseguirlo:</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nroot /var/www/freewebsitetemplates.com/preview/space-science;\nindex index.html index.htm index.nginx-debian.html;\nserver_name freewebsitetemplates.com www.freewebsitetemplates.com;\nlocation              {\n\n    try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <ul> <li>Para eso a\u00f1adiremos configuraremos un nuevo location para ello:</li> </ul> <pre><code>    server {\n    listen 80;\n    listen [::]:80;\n    root /var/www/freewebsitetemplates.com/preview/space-science;\n    index index.html index.htm index.nginx-debian.html;\n    server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n    location  / {\n        try_files $uri $uri/ =404;\n        }\n\n    location /project.html {\n        satisfy all;\n\n        allow 192.168.116.131/24;\n        deny all;\n\n        auth_basic  \"\u00c1rea restringida\";\n        auth_basic_user_file    /etc/nginx/.htpasswd;\n        }\n    }\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/","title":"Pr\u00e1ctica 2.3 \u2013 Proxy inverso con Nginx","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n</p> <ul> <li>No iniciar esta practica hasta haber completado la pr\u00e1ctica2.1</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#que-es-un-servidor-proxy","title":"\u00bfQu\u00e9 es un servidor proxy?","text":"<p>Un servidor proxy o proxy web, es un servidor que se encuentra frente a un grupo de m\u00e1quinas cliente. Cuando esas m\u00e1quinas realizan solicitudes a sitios y servicios en Internet, el servidor proxy intercepta esas solicitudes y luego se comunica con los servidores web en nombre de esos clientes, como un intermediario. </p> <p>Hay algunas razones por las que uno podr\u00eda querer usar un proxy de reenv\u00edo: </p> <ul> <li>Para evitar restricciones de navegaci\u00f3n estatales o institucionales</li> <li>Para bloquear el acceso a cierto contenido</li> <li>Para proteger su identidad en l\u00ednea</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#en-que-se-diferencia-un-proxy-inverso","title":"\u00bfEn qu\u00e9 se diferencia un proxy inverso?","text":"<p>Estar\u00edamos hablando del caso opuesto al anterior.</p> <p>Un proxy inverso es un servidor que se encuentra frente a uno o m\u00e1s servidores web, interceptando las solicitudes de los clientes. Esto es diferente de un proxy de reenv\u00edo, donde el proxy se encuentra frente a los clientes. Con un proxy inverso, cuando los clientes env\u00edan solicitudes al servidor de un sitio web, esas solicitudes son interceptadas en la frontera de la red por el servidor proxy inverso. El servidor proxy inverso enviar\u00e1 solicitudes y recibir\u00e1 respuestas del servidor del sitio web.</p> <p>A continuaci\u00f3n se describen algunos de los beneficios de un proxy inverso:</p> <ul> <li>Balanceo de carga</li> <li>Protecci\u00f3n contra ataques:</li> <li>Almacenamiento en cach\u00e9</li> <li>Cifrado SSL</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#tarea","title":"Tarea","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#configuraciones","title":"Configuraciones","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#nginx-servidor-web","title":"Nginx servidor web","text":"<p>Para usar un proxy inverso necesitaremos tener 2 m\u00e1quinas virtuales, 1 donde est\u00e9 alojado el servidor web y otra que haga de proxy. Para agilizar este proceso clonaremos la m\u00e1quina que ya ten\u00edamos.</p> <p>Por lo tanto:</p> <ul> <li>Uno servir\u00e1 las p\u00e1ginas web que ya hemos configurado.</li> <li>El nuevo servidor clon Debian con Nginx configurado como proxy inverso</li> <li>Realizaremos las peticiones HTTP desde el navegador web de nuestra m\u00e1quina f\u00edsica/anfitri\u00f3n hacia el proxy clonado, que nos redirigir\u00e1 al servidor web original.</li> </ul> <p>Para que todo quede m\u00e1s diferenciado y os quede m\u00e1s claro que la petici\u00f3n est\u00e1 pasando por el proxy inverso y llega al servidor web destino, vamos a hacer que cada uno de los servidores escuche las peticiones en un puerto distinto. </p> <ol> <li> <p>En primer lugar, deberemos cambiar el nombre de nuestra web por el de <code>webserver</code>, eso implica:</p> <ul> <li>Cambiar el nombre en <code>/var/www/</code></li> </ul> <p></p> <ul> <li>Cambiar el nombre del archivo de configuraci\u00f3n de sitios disponibles par Nginx</li> </ul> <p></p> <ul> <li>Eliminar el link simb\u00f3lico antiguo con el comando unlink <code>nombre_del_link</code> dentro de la carpeta sites-enabled y crear el nuevo para el nuevo nombre. </li> </ul> <p></p> <p></p> </li> <li> <p>En el archivo de configuraci\u00f3n del sitio web, en lugar de hacer que el servidor escuche en el puerto 80, cambiadlo al 8080. </p> </li> <li>Reiniciar Nginx</li> </ol>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#nginx-proxy-inverso","title":"Nginx proxy inverso","text":"<p>Ahora cuando intentemos acceder a <code>http://practica2-1</code> (o el nombre de tu dominio), en realidad accederemos al servidor proxy,  el cual nos redigira a, <code>http://web-server</code>, el servidor que hemos configurado anteriormente con ese nombre en el puerto 8080.</p> <p>Para esto:</p> <ul> <li>Crearemos un archivo de configuraci\u00f3n en sites-available con el nombre <code>practica2-1</code> </li> <li>Este archivo tendr\u00e1 la siguiente forma:</li> </ul> <pre><code>server { \n    listen __; \n    server_name ____________; \n    location / { \n    proxy_pass http://_________:____; \n    } \n} \n</code></pre> <ul> <li>En Listen deber\u00e9is poner el puerto que escuchara el servidor.</li> <li>En server name el nombre de nuestro sitio web o dominio.</li> <li>En proxy_pass indicar a d\u00f3nde se van a redirigir las peticiones, esto es, al servidor web. Por tanto, deb\u00e9is poner la IP y n\u00famero de puerto adecuados de vuestro sitio web configurado en el apartado anterior. </li> </ul> <p>Quedando algo as\u00ed:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#comprobaciones","title":"Comprobaciones","text":"<p>Tras estos cambios si hemos conseguido hacerlos sin problemas, deber\u00edamos ser capaces de acceder a nuestro servidor sin problemas</p> <ul> <li>Deberemos comprar los access.log de cada servidor web.</li> </ul> <p></p> <p>Y como podemos ver en la cabecera, muestra un c\u00f3digo 301 que es redireccionamiento y nos manda hacia el servidor donde est\u00e1 la p\u00e1gina web.</p> <ul> <li>Comprobaremos adem\u00e1s la petici\u00f3n y respuesta con las herramientas de desarrollador de Firefox.</li> </ul> <p></p> <p>En d\u00f3nde se puede ver la respuesta de la petici\u00f3n GET HTTP (200 OK). </p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.3/#anadiendo-cabeceras","title":"A\u00f1adiendo cabeceras:","text":"<p>Adem\u00e1s de haber mirado los logs, vamos a demostrar a\u00fan de forma m\u00e1s clara que la petici\u00f3n est\u00e1 pasando por el proxy inverso y que est\u00e1 llegando al servidor web y que vuelve por el mismo camino. </p> <p>As\u00ed pues, vamos a configurar tanto el proxy inverso como el servidor web para que a\u00f1adan cada uno la cabecera \u201cHost\u201d que tambi\u00e9n vimos en teor\u00eda.</p> <p>Para a\u00f1adir cabeceras, en el archivo de configuraci\u00f3n del sitio web debemos a\u00f1adir dentro del bloque location / { \u2026 } debemos a\u00f1adir la directiva: </p> <pre><code>add_header Host nombre_del_host;\n</code></pre> <ol> <li> <p>A\u00f1adiremos primero esta cabecera \u00fanicamente en el archivo de configuraci\u00f3n del servidor proxy. </p> </li> <li> <p>Reiniciamos nginx.</p> </li> <li> <p>Comprobamos que podemos acceder sin problema.</p> </li> <li> <p>Con las herramientas de desarrollador comprobamos que la petici\u00f3n ha pasado por el proxy inverso que ha a\u00f1adido la cabecera en la respuesta:  </p> </li> <li> <p>Hacemos lo mismo con el servidor web. Esta vez el Nombre_del_host ser\u00e1 servidor_web_acoronado. </p> </li> </ol> <p>Si hemos configurado todo bien, al examinar las peticiones podremos ver las dos cabeceras, la del servidor proxy y la del servidor web.</p> <p></p> <p>Tras esto, ya tendremos nuestro servidor proxy creado y funcionando.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/","title":"Pr\u00e1ctica 2.4 \u2013 Balanceo de carga con proxy inverso en Nginx","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n</p> <ul> <li>No iniciar esta practica hasta haber completado la pr\u00e1ctica2.3</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#introduccion","title":"Introducci\u00f3n","text":"<p>Los servidores proxys inversos y los balanceadores de carga son componentes muy importantes de una arquitectura inform\u00e1tica cliente-servidor.</p> <p>Las definiciones b\u00e1sicas son muy simples:</p> <ul> <li> <p>Un proxy inverso acepta una solicitud de un cliente, y la reenv\u00eda al servidor.</p> </li> <li> <p>Un balanceador de carga distribuye las solicitudes entrantes del cliente entre un grupo de servidores.</p> </li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#balanceadores-de-carga","title":"Balanceadores de carga","text":"<p>Los balanceadores de carga se implementan con mayor frecuencia cuando un sitio necesita varios servidores porque el volumen de solicitudes es demasiado para que un solo servidor lo maneje de manera eficiente.</p> <p>Por lo general, todos los servidores alojan el mismo contenido, y el trabajo del balanceador de carga es distribuir la carga de trabajo de manera que se haga el mejor uso de la capacidad de cada servidor, evite la sobrecarga en cualquiera de ellos y d\u00e9 como resultado la respuesta m\u00e1s r\u00e1pida posible al cliente.</p> <p>Un balanceador de carga tambi\u00e9n puede mejorar la experiencia del usuario al reducir la cantidad de respuestas de error que ve el cliente. Lo hace detectando cu\u00e1ndo los servidores caen y desviando las solicitudes de ellos a los otros servidores del grupo. En la implementaci\u00f3n m\u00e1s simple, el balanceador de carga detecta el estado del servidor al interceptar las respuestas de error a las solicitudes regulares.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#tarea","title":"Tarea","text":"<p>Vamos a configurar dos servidores web Nginx con dos m\u00e1quinas Debian, adem\u00e1s de reutilizar el proxy inverso Nginx configurado en la pr\u00e1ctica anterior. Partiremos, por tanto, de la configuraci\u00f3n de la pr\u00e1ctica anterior a\u00f1adiendo lo necesario:</p> <ul> <li>Cada servidor web presentar\u00e1 un sitio web espec\u00edfico para esta pr\u00e1ctica<ul> <li>El webserver2 debe tener la IP asignada de forma fija mediante la configuraci\u00f3n DHCP</li> </ul> </li> <li>El proxy inverso que ya ten\u00edamos configurado, habr\u00e1 que configurarlo para que realice el balanceo de carga que deseamos</li> <li>Realizaremos las peticiones HTTP desde el navegador web de nuestra m\u00e1quina anfitriona.</li> </ul> <p>Haremos las peticiones desde el navegador al proxy inverso, que las repartir\u00e1 entre los dos servidores web que tenemos.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#configuraciones","title":"Configuraciones","text":"<p>Borrar antiguos archivos de configuraci\u00f3n</p> <ul> <li>En esta pr\u00e1ctica ya no usaremos los archivos de la p\u00e1gina web usada en las anteriores, por tanto, es recomendable eliminar los archivos de configuraci\u00f3n que hemos estado usando anteriormente</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#nginx-servidor-web-1","title":"Nginx Servidor Web 1","text":"<p>El primer servidor web ser\u00e1 el servidor principal que hemos estado usando hasta ahora, donde tenemos instalado ya el servicio web.</p> <p>Debemos configurar este servidor web para que sirva el siguiente <code>index.html</code> que deb\u00e9is crear dentro de la carpeta <code>/var/www/webserver1/html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Server 1&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;Esto es el webserver 1&lt;/header&gt;\n    &lt;p&gt;Prueba de balanceo de carga recargando esta p\u00e1gina&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El nombre del sitio web que en los archivos correspondientes en sites-availables es webserver1. En donde escribiremos la siguiente configuraci\u00f3n.</p> <pre><code>server {\n    listen 8080;\n\n    server_name webserver1 www.webserver1;\n\n    root /var/www/webserver1/html;\n    index index.html index.htm;\n\n    location / {            \n            add_header Host servidor_web1_acoronado;\n            try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>Como veis el servidor escuchara el puerto <code>8080</code> y le a\u00f1adiremos la cabecera Host: servidor_web1_acoronado.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#nginx-servidor-2","title":"Nginx Servidor 2","text":"<p>En este servidor web debemos realizar una configuraci\u00f3n id\u00e9ntica al servidor web 1, pero cambiando webserver1 por webserver2 (tambi\u00e9n en el index.html), as\u00ed como el nombre de la cabecera a\u00f1adida, que ser\u00e1 Serv_Web2_vuestronombre</p> <p>HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Server 2&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;Esto es el webserver 2&lt;/header&gt;\n    &lt;p&gt;Prueba de balanceo de carga recargando esta p\u00e1gina&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Config NGINX:</p> <pre><code>server {\n        listen 8080;\n\n        server_name webserver2 www.webserver2;\n\n        root /var/www/webserver2/html;\n        index index.html index.htm;\n\n        location / {\n                add_header Host servidor_web2_acoronado;\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>Como pod\u00e9is observar la configuraci\u00f3n es cas\u00ed id\u00e9ntica, cambiando simplemente el nombre y la ruta.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#nginx-proxy-inverso","title":"Nginx Proxy Inverso","text":"<p>Tras haber realizado las configuraciones anteriores, ya tendremos los 2 servidores web listos, entre los cuales vamos a distribuir las peticiones.</p> <p>Por tanto, deberemos configurar el servidor proxy para que haga uso de los servidores web y distribuya estas peticiones.</p> <ul> <li>Crearemos en sites-available el archivo de configuraci\u00f3n <code>balanceo</code></li> </ul> <p>El cual tendr\u00e1 el siguiente formato.</p> <pre><code>upstream backend_hosts {\n            random;\n            server ________:____;\n            server ________:____;\n}\n        server {\n            listen 80;\n            server_name ________;      \n            location / {\n                proxy_pass http://backend_hosts;\n            }\n        }\n</code></pre> <p>Donde:</p> <ul> <li> <p>upstream backend_hosts \u2192 son los servidores entre los que se va a repartir la carga, que son los dos que hemos configurado anteriormente.</p> </li> <li> <p>Aqu\u00ed deberemos colocar la IP de cada servidor, as\u00ed como el puerto donde est\u00e1 escuchando las peticiones web.</p> </li> <li> <p>A este grupo de servidores le ponemos un nombre, que es backend_hosts</p> </li> <li> <p>El par\u00e1metro random lo que hace es repartir las peticiones HTTP que llegan al proxy inverso de forma completamente aleatoria entre el grupo de servidores que se haya definido en el bloque upstream (en nuestro caso solo hay dos). </p> </li> </ul> <p>Una vez ya configurado se ver\u00eda algo as\u00ed:</p> <pre><code>upstream backend_hosts {\n            random;\n            server 192.168.116.117:8080;\n            server 192.168.116.142:8080;\n}\n        server {\n            listen 80;\n            server_name practica2-1;\n            location / {\n                add_header Host servidor_web2_acoronado;\n                proxy_pass http://backend_hosts;\n            }\n        }\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#comprobaciones","title":"Comprobaciones","text":"<p>Si acced\u00e9is a vuestro sitio web, deb\u00e9is poder seguir accediendo sin problemas.</p> <ul> <li>Comprobad d\u00e1ndole repetidamente a F5, que acced\u00e9is cada vez a uno de los servidores. Se os mostrar\u00e1 el contenido del index.html del servidor correspondiente cada vez.</li> <li>Para una doble comprobaci\u00f3n, utilizando las herramientas de desarrollador, mostrad que la web que se os muestra coincide con la cabecera que ha a\u00f1adido el servidor web en la respuesta HTTP.</li> </ul> <p>Y como podemos ver el servidor proxy hace el balanceo y nos muestra, ambas p\u00e1ginas de los distintos servidores</p> <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#comprobacion-del-balanceo-de-carga-cuando-cae-un-servidor","title":"Comprobaci\u00f3n del balanceo de carga cuando cae un servidor","text":"<p>Nuestro balanceador de carga est\u00e1 constantemente monitorizando \u201cla salud\u201d de los servidores web. De esta forma, si uno deja de funcionar por cualquier raz\u00f3n, siempre enviar\u00e1 las solicitudes a los que queden \u201cvivos\u201d. Vamos a comprobarlo:</p> <pre><code>Para el servicio Nginx en el servidor web 1 y comprueba, de la misma forma que en el apartado anterior, que todas las solicitudes se env\u00edan ahora al servidor web 2\n\nTras iniciar de nuevo Nginx en el servidor web 1, repite el proceso con el servidor web 2.\n</code></pre> <ul> <li>Para esto apagaremos el primer servidor con el comando <code>sudo poweroff</code> </li> </ul> <p></p> <p>Y como podemos ver, el servidor proxy solo nos muestra la p\u00e1gina alojada en el servidor web 2</p> <p>;</p> <ul> <li>Ahora para comprobar si apagando el segundo nos manda al primero hacemos encendemos el primero y apagamos el segundo con el comando <code>poweroff</code></li> </ul> <p></p> <p>Y como se puede ver, el servidor proxy solo nos muestra la p\u00e1gina alojada en el servidor web 1.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.4/#cuestiones","title":"Cuestiones","text":"<p>Cuesti\u00f3n 1</p> <ul> <li>Busca informaci\u00f3n de qu\u00e9 otros m\u00e9todos de balanceo se pueden aplicar con Nginx y describe al menos 3 de ellos.</li> </ul> <p>1 Least connections (least_conn)</p> <ul> <li>Este m\u00e9todo distribuye el tr\u00e1fico hacia el servidor que tiene la menor cantidad de conexiones activas en el momento de la petici\u00f3n.</li> </ul> <p>2 IP Hash (ip_hash)</p> <ul> <li>Este m\u00e9todo usa la direcci\u00f3n IP del cliente para determinar a qu\u00e9 servidor se debe dirigir la solicitud (Es util para mantener la sesi\u00f3n del usuario, pues sus peticiones siempre se mandan al mismo servidor).</li> </ul> <p>3 Least Time (Meno tiempo)</p> <ul> <li>Este m\u00e9todo env\u00eda el tr\u00e1fico al servidor con el menor tiempo de respuesta. Ideal para cuando se necesiten respuestas muy r\u00e1pidas</li> </ul> <p>Cuesti\u00f3n 2</p> <ul> <li>Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde.</li> </ul> <ul> <li>Si quisiera a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga deberemos ir al bloque de configuraci\u00f3n upstream backend_hosts y al igual que hicimos anteriormente a\u00f1adiremos dos l\u00edneas m\u00e1s de configuraci\u00f3n:</li> </ul> <pre><code>upstream backend_hosts {\n            random;\n            server 192.168.116.117:8080;\n            server 192.168.116.142:8080;\n\n            server nuevo_server1;\n            server nuevo_server2;\n}\n</code></pre> <p>Tras esto reiniciaremos nginx y deber\u00edamos tener 4 servidores disponibles para hacer balanceo de carga</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/","title":"Pr\u00e1ctica 2.5 - Proxy Inverso y balanceo de carga con SSL en NGINX","text":""},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#introduccion","title":"Introducci\u00f3n","text":"<p>A partir de las pr\u00e1cticas anteriores hemos creado un proxy inverso que act\u00faa de intermediario entre dos servidores web, balanceando la carga entre ellos.</p> <p>Una funci\u00f3n que pod\u00eda tener un proxy inverso era realizar el cifrado y descifrado de SSL, para utilizar HTTPS en los servidores web. De eta forma se aliviaba la carga de trabajo de los servidores web, ya que es una tarea que consume recursos.</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#certificados","title":"Certificados","text":"<p>HTTPS se basa en el uso de certificados digitales.</p> <p>Groso modo, cuando entramos en una web via HTTPS, esta nos presenta un certificado digital para asegurar que es qui\u00e9n dice ser. Para saber si este certificado es v\u00e1lido deberemos consultar a la Autoridad de certificaci\u00f3n (CA).  </p> <p>Las CA son entidades que emiten certificados y su funcionamiento se basa en la confianza. Adem\u00e1s, los navegadores web tienen pre cargadas las Autoridades de Certificaci\u00f3n en las que conf\u00edan por defecto a la hora de navegar por webs HTTPS.</p> <p>;</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#tarea","title":"Tarea","text":"<p>Partiendo de la configuraci\u00f3n exacta de la pr\u00e1ctica anterior, en donde ten\u00edamos el servidor proxy de balanceo de carga y los dos servidores web.</p> <p>Deberemos a\u00f1adir la configuraci\u00f3n SSL para el cifrado del proxy inverso, para cualquier solicitud distinta a los servidores web</p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#creacion-del-certificado-autofirmado","title":"Creaci\u00f3n del certificado autofirmado","text":"<p>Nosotros no usaremos certificados de ninguna CA de confianza, ya que:</p> <ul> <li>Nuestra p\u00e1gina web no est\u00e1 publicada en Internet</li> <li>Y estos certificados son de pago.</li> </ul> <p>As\u00ed que, crearemos nuestro propio certificado y lo firmaremos nosotros mismo como si fu\u00e9semos una CA aut\u00e9ntica.</p> <p>Veamos, pues el proceso para generar los certificados y las claves asociadas a ellos (privada/p\u00fablica). En primer lugar, debemos crear el siguiente directorio:</p> <p><code>/etc/nginx/ssl</code></p> <p>Podemos crear el certificado y las claves de forma simult\u00e1nea con un \u00fanico comando <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt</code>, donde: </p> <ul> <li> <p><code>openssl</code>: Es una herramienta por l\u00ednea de comandos, que permite administras certificados, clave y otros archivos OpenSSL</p> </li> <li> <p><code>req</code>: Este subcomando se utiliza para generar una solicitud de certificados y tambi\u00e9n solicitudes de firma de certificados (CSR).</p> </li> </ul> <p>-<code>x509</code>: Esto modifica a\u00fan m\u00e1s el subcomando anterior al decirle a la herramienta que queremos crear un certificado autofirmado en lugar de generar una solicitud de firma de certificado, como suceder\u00eda normalmente.</p> <p>-<code>nodes</code>: Esto le dice a OpenSSL que omita la opci\u00f3n de asegurar nuestro certificado con contrase\u00f1a. Necesitamos que Nginx pueda leer el archivo sin la intervenci\u00f3n del usuario cuando se inicia el servidor. Una contrase\u00f1a evitar\u00eda que esto sucediera, ya que, tendr\u00edamos que introducirla a mano despu\u00e9s de cada reinicio.</p> <p>-<code>days 365</code>: esta opci\u00f3n establece el tiempo durante el cual el certificado se considerar\u00e1 v\u00e1lido. Lo configuramos para un a\u00f1o.</p> <p>-<code>newkey rsa</code>: 2048: Esto especifica que queremos generar un nuevo certificado y una nueva clave al mismo tiempo. No creamos la clave necesaria para firmar el certificado en un paso anterior, por lo que debemos crearla junto con el certificado.</p> <p>-<code>keyout</code>: este par\u00e1metro le dice a OpenSSL d\u00f3nde colocar el archivo de clave privada generado que estamos creando.</p> <p>-<code>out</code>: Esto le dice a OpenSSL d\u00f3nde colocar el certificado que estamos creando.</p> <p>El comando quedar\u00eda as\u00ed:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#configuracion-ssl-en-el-proxy-inverso","title":"Configuraci\u00f3n SSL en el proxy inverso","text":"<p>De la pr\u00e1ctica anterior, dentro del directorio <code>/etc/nginx/sites-availabe</code> tenemos el archivo de configuraci\u00f3n \"balanceo\". Es aqu\u00ed donde realizaremos la configuraci\u00f3n para que el acceso al sitio web se realice mediante SSL(HTTPS)</p> <p>Es por esto dentro del bloque <code>server{...}</code> cambiaremos el puerto de escucha listen 80 por el siguiente bloque a continuaci\u00f3n.</p> <pre><code>server {\n        listen 443 ssl;\n        ssl_certificate /etc/nginx/ssl/server.crt;\n        ssl_certificate_key /etc/nginx/ssl/server.key;\n        ssl_protocols TLSv1.3;\n        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AESA128:ECDH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n\n        server_name balanceo;\n        access_log /var/log/nginx/https_access.log;\n        location / {\n                add_header Host servidor_proxy_acoronado;\n                proxy_pass http://backend_hosts;\n                }\n}\n</code></pre> <p></p> <p>Donde estamos diciendo que:</p> <ul> <li>Escuche en el puerto 443 (Puerto por defecto de HTTPS).</li> <li>El directorio donde est\u00e1 el certificado que hemos generado.</li> <li>El directorio donde est\u00e1 la clave que hemos generado anteriormente.</li> <li>Los protocolos y tipos de cifrados que se pueden utilizar -&gt; Estas son las versiones de protocolos y los tipos de cifrados considerados seguros a d\u00eda de hoy.</li> <li><code>server_name</code> Es el nombre del servidor</li> <li>Y por \u00faltimo el archivo donde se guardan los logs de acceso.</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#comprobaciones","title":"Comprobaciones","text":"<p>Warning</p> <p>Si ahora intentamos acceder a https://balanceo deber\u00eda de saltar un aviso de seguridad debido a que nuestro certificado es autofirmado.</p> <p></p> <ul> <li>A pesar de esto recalcar que no pasa nada, ya que hemos sido nosotros los que hemos creado este certificado.</li> </ul> <p>Para comprobar que los datos del certificado son correctos podemos comprobarlo as\u00ed.</p> <ol> <li>Pulsamos en el candado de la barra de b\u00fasqueda</li> </ol> <p></p> <ol> <li>Le damos a m\u00e1s informaci\u00f3n</li> </ol> <p></p> <ol> <li>Y por \u00faltimo, ver certificado:</li> </ol> <p></p> <ol> <li>Vemos los detalles del certificado:</li> </ol> <p></p> <p>Cuesti\u00f3n 1</p> <p>Si ahora intent\u00e1is acceder a http://balanceo, \u00bfdeber\u00edais poder acceder? Comprobadlo y describid qu\u00e9 pasa y por qu\u00e9. </p> <ul> <li>Si intentamos acceder a http://balanceo, nos deja acceder mediante http al servidor proxy, mostrando la web correctamente.</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#redireccion-forzosa-a-https","title":"Redirecci\u00f3n forzosa a HTTPS","text":"<p>Para que, indistintamente de la forma por la que accedamos al sitio web balanceo, siempre se fuerce a utilizar HTTPS, necesitaremos un bloque de configuraci\u00f3n adicional.</p> <p>Necesitamos a\u00f1adir el siguiente bloque:</p> <pre><code>server{\n    listen 80;\n    server_name balanceo;\n    access_log /var/log/nginx/http_access.log;\n    return 301 https://balanceo$request_uri;\n}\n</code></pre> <p></p> <p>Con esta configuraci\u00f3n estamos que:</p> <ul> <li>Se esc\u00fache el puerto 80 (HTTP)</li> <li>Que el nombre del servidor es balanceo</li> <li>Que guarde los logs en <code>/var/log/nginx/http_access.log</code></li> <li>Y que cuando reciba una petici\u00f3n HTTP, devuelve un c\u00f3digo HTTP 301(redireccionamiento)</li> </ul> <p>Tarea1</p> <ul> <li>Eliminad del otro bloque server{\u2026} las l\u00edneas que hagan referencia a escuchar en el puerto 80 (listen 80\u2026). -Reiniciad el servicio</li> <li>Comprobad ahora que cuando entr\u00e1is en http://balanceo, autom\u00e1ticamente os redirige a la versi\u00f3n segura de la web.</li> <li>Comprobad que cuando realiz\u00e1is una petici\u00f3n en el archivo de log http_access.log aparece la redirecci\u00f3n 301 y que, de la misma manera, aparece una petici\u00f3n GET en https_access.log.</li> </ul> <ol> <li>Eliminamos las lineas listen</li> </ol> <p></p> <ol> <li>Reiniciamos el servicio</li> </ol> <p><code>sudo systemctl restart nginx</code></p> <ol> <li>Comprobamos que cuando entramos en http://balanceo nos redirige a HTTPS</li> </ol> <p></p> <ol> <li> <p>Access logs</p> <ul> <li>HTTP_ACCESS.log</li> </ul> <p></p> <ul> <li>HTTPS_ACCESS.log</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%202/Practica2.5/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n1</p> <p>-Hemos configurado nuestro proxy inverso con todo lo que nos hace falta pero no nos funciona y da un error del tipo This site can't provide a secure connection, ERR_SSL_PROTOCOL_ERROR.</p> <p>Dentro de nuestro server block tenemos esto:</p> <pre><code>server {\nlisten 443;\nssl_certificate /etc/nginx/ssl/enrico-berlinguer/server.crt;\nssl_certificate_key /etc/nginx/ssl/enrico-berlinguer/server.key;\nssl_protocols TLSv1.3;\nssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\nserver_name enrico-berlinguer;\naccess_log /var/log/nginx/https_access.log;\n\nlocation / {\n    proxy_pass http://red-party;\n    }\n}\n</code></pre> <ul> <li>Este error estar siendo provocado porque en <code>listen 443;</code> no hemos puesto <code>listen 443 ssl;</code></li> </ul> <p>Cuesti\u00f3n 2</p> <ul> <li>Imaginad que intentamos acceder a nuestro sitio web HTTPS y nos encontramos con el siguiente error:</li> </ul> <p></p> <ul> <li>Investigad qu\u00e9 est\u00e1 pasando y como se ha de solucionar.</li> </ul> <ul> <li>Esto sucede ya que el certificado que est\u00e1 usando la p\u00e1gina no ha sido generado por ninguna Autoridad de certificaci\u00f3n. Para solucionar este problema deberemos generar un certificado a trav\u00e9s de dichas autoridades o para acceder a la web a pesar de este aviso establecer una excepci\u00f3n. </li> </ul>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat y despliegue con Maven","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#introduccion","title":"Introducci\u00f3n","text":"<p>La presente pr\u00e1ctica tiene como objetivo guiar a trav\u00e9s del proceso de instalaci\u00f3n, configuraci\u00f3n y puesta en marcha de Apache Tomcat en un entorno de trabajo. Durante esta pr\u00e1ctica, se detallar\u00e1n los pasos necesarios para la descarga, instalaci\u00f3n y configuraci\u00f3n b\u00e1sica de Tomcat, junto con la puesta en funcionamiento del servidor y la implementaci\u00f3n de una aplicaci\u00f3n de prueba para verificar su correcto funcionamiento. Tambi\u00e9n se explorar\u00e1n configuraciones b\u00e1sicas de seguridad y optimizaci\u00f3n del servidor, que son esenciales en un entorno de producci\u00f3n.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#instalacion-tomcat","title":"Instalaci\u00f3n Tomcat","text":"<p>Nosotros para la instalaci\u00f3n de Tomcat lo haremos de la siguiente manera:</p> <p>Lo primero que haremos sera comprobar si existen actualizaciones para nuestro equipo mediante el comando: </p> <pre><code>sudo apt update\n</code></pre> <p>Tras esto instalaremos UFW(https://linuxhint.com/debian_firewalls_ufw/) para poder abrir el puerto 8080 el cual es usado por defecto para mostrar las p\u00e1ginas web con el comando: <code>sudo ufw allow 8080</code></p> <p></p> <p>Tras esto procederemos a installar java con el siguiente comando</p> <pre><code>sudo apt install openjdk-17-jdk -y\n</code></pre> <p>Una vez se haya completado la instalaci\u00f3n deberemos comprobar que se ha instalado correctamente esto lo podremos hacer mediante el comando: <code>java -version</code></p> <p></p> <p>A continuaci\u00f3n de la instalaci\u00f3n de Java procederemos a la instalaci\u00f3n de tomcat para esto descargaremos el archivo tar.gz de la web usando el siguiente comando.</p> <pre><code>wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.33/bin/apache-tomcat-10.1.33.tar.gz\n</code></pre> <p></p> <p>Tras esto crearemos el usuario y grupo con el que Tomcat 10 se ejecutara como servicio:</p> <pre><code>sudo useradd -U -m -d /opt/tomcat -k /dev/null -s /bin/false tomcat\n</code></pre> <p>Descomprimimos el paquete que acabamos de descarga en la ruta que hemos establecido como directorio personal del usuario tomcat:</p> <pre><code>sudo tar xf apache-tomcat-10.1.33.tar.gz -C /opt/tomcat/\n</code></pre> <p>Tras esto le asignamos la propiedad de estos archivos al usuario tomcat</p> <pre><code>sudo chown tomcat: /opt/tomcat/ -R\n</code></pre> <p>Como el subdirectorio que se acaba de crear contiene n\u00fameros de versi\u00f3n en su nombre, podemos renombrarlo o crear un enlace simb\u00f3lico sin n\u00fameros de versi\u00f3n, para facilitar la instalaci\u00f3n y mantenimiento:</p> <pre><code>sudo ln -s /opt/tomcat/apache-tomcat-10.1.24/ /opt/tomcat/apache-tomcat\n</code></pre> <p>A continuaci\u00f3n crearemos el archivo de unidad para Systemd:</p> <pre><code>sudo nano /etc/systemd/system/tomcat10.service\n</code></pre> <p>Y lo rellenamos con el siguiente contenido</p> <pre><code>[Unit]\nDescription=Tomcat 10.1 servlet container para Debian 12 Bookworm\nAfter=network.target\n[Service]\nType=forking\nUser=tomcat\nGroup=tomcat\nEnvironment=\"JAVA_OPTS=-Djava.security.egd=file:///dev/urandom\"\nEnvironment=\"CATALINA_BASE=/opt/tomcat/apache-tomcat\"\nEnvironment=\"CATALINA_HOME=/opt/tomcat/apache-tomcat\"\nEnvironment=\"CATALINA_PID=/opt/tomcat/apache-tomcat/temp/tomcat.pid\"\nEnvironment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"\nExecStart=/opt/tomcat/apache-tomcat/bin/startup.sh\nExecStop=/opt/tomcat/apache-tomcat/bin/shutdown.sh\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Tras esto iniciamos el servicio con <code>sudo systemctl start tomcat10</code> y posteriormente comprobamos su estado para ver si todo ha ido bien</p> <p></p> <p>Por ultimo comprobaremos si podemos acceder a Tomcat desde un navegador en este caso nos conectaremos desde la m\u00e1quina anfitriona desde el navegador mediante la url <code>http://[IP-MAQUINA-VIRTUAL]:8080</code></p> <p>Y si todo funciona deberia de mostrarnos algo as\u00ed:</p> <p></p> <p>Ahora para poder acceder al area de administraci\u00f3n deberemos crear un usuario en <code>sudo nano /opt/tomcat/apache-tomcat/conf/tomcat-users.xml</code>. En mi caso creare el usuario:</p> <pre><code>&lt;role rolename=\"admin\"/&gt;\n&lt;role rolename=\"admin-gui\"/&gt;\n&lt;role rolename=\"manager\"/&gt;\n&lt;role rolename=\"manager-gui\"/&gt;\n\n&lt;user username=\"acoronado\" password=\"usuario123\" roles=\"admin,admin-gui,manager,manager-gui\"/&gt;\n</code></pre> <p>Ahora instalaremos el panel de control para tomcat, en este caso al contar con la versi\u00f3n 10 lo haremos de la siguiente manera:</p> <pre><code>sudo apt install tomcat10-admin\n</code></pre> <p>Las aplicaciones administrativas, /manager tiene restringido el acceso permitiendo \u00fanicamente conexiones locales. Para permitir acceso desde red, \u00fatil para subir los archivos .war desde nuestra m\u00e1quina anfitriona deberemos editar el archivo context.xml</p> <pre><code>sudo nano /opt/tomcat/apache-tomcat/webapps/manager/META-INF/context.xml\n</code></pre> <p>Buscamos la clausula valve y la encerramos en un bloque de comentarios</p> <p></p> <p>Y reiniciamos el servicio tomcat. Ahora si intentasemos acceder al manager deberia permitinos iniciar sesi\u00f3n con las credenciales anteriormente creadas.</p> <p></p> <p>Una vez introducidas las credenciales deberiamos de ver un menu como este en el cual podemos administrar nuestro servidor.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#despliegue-manual-mediante-la-gui-de-administracion","title":"Despliegue manual mediante la GUI de administraci\u00f3n","text":"<p>Para desplegar un archivo WAR usando el panel de administraci\u00f3n seguiremos estos pasos: </p> <ol> <li>Iniciaremos sesi\u00f3n con la cuenta que hemos creado anteriormente.</li> <li>Buscamos el apartado donde nos permite desplegar un WAR manualmente, selecionamos nuestro archivo y lo desplegamos.</li> </ol> <p></p> <p>Tras subir el archivo, en la ruta de aplicaciones se mostrara y podremos acceder a el.</p> <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#despliegue-con-maven","title":"Despliegue con Maven","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#instalacion-de-maven","title":"Instalaci\u00f3n de Maven","text":"<p>Para instalar Maven usaremos el gestor de paquetes APT. </p> <p>Lo primero que haremos sera comprobar si existen actualizaciones para nuestro equipo mediante el comando: </p> <pre><code>sudo apt update\n</code></pre> <p>E instalamos Maven</p> <pre><code>sudo apt install maven\n</code></pre> <p>Para compprobar que todo ha ido correctamente, podemos ver la versi\u00f3n instalada de Maven:</p> <p><pre><code>mvn -v\n</code></pre> </p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#configuracion-de-maven","title":"Configuraci\u00f3n de Maven","text":"<p>Para poder realizar despliegues en nuestro Tomcat previamente instalado, necesitamos realizar la configuraci\u00f3n adecuada para Maven.</p> <p>Tomcat9</p> <p>Esto solo funcionara si tenemos instalada la versi\u00f3n 9 de tomcat o anteriores.</p> <ol> <li>En primer lugar crearemos un usuario nuevo en tomcat con solo el rol manager-script para permitir que Maven se autentique contra Tomcat y pueda realizar el despliegue</li> </ol> <pre><code>&lt;role rolename=\"manager-script\"/&gt;\n\n&lt;user username=\"acoronado-deploy\" password=\"usuario\" roles=\"manager-script\"/&gt;\n</code></pre> <p></p> <p>2.Editar el archivo /etc/maven/settings.xml para indicarle a Maven, un identificador para el servidor sobre el que vamos a desplegar (no es m\u00e1s que un nombre, ponedle el nombre que consider\u00e9is), as\u00ed como las credenciales. Todo esto se har\u00e1 dentro del bloque servers del XML:</p> <pre><code>&lt;server&gt;\n  &lt;id&gt;Tomcat.P.3.1&lt;/id&gt;\n  &lt;username&gt;acoronado-deploy&lt;/username&gt;\n  &lt;password&gt;usuario&lt;/password&gt;\n&lt;/server&gt;\n</code></pre> <p>Por \u00faltimo clonaremos este proyecto para desplegarlo con maven <code>git clone https://github.com/cameronmcnz/rock-paper-scissors.git</code></p> <ol> <li>Una vez clonado deberemosmodificar el POM del proyecto para que haga referencia a que el despliegue se realice con el plugin de Maven para Tomcat</li> </ol> <pre><code>&lt;build&gt;\n  &lt;finalName&gt;rock-deploy&lt;/finalName&gt; #\n\n\n  &lt;plugins&gt; \n  &lt;plugin&gt;\n  &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n  &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;2.2&lt;/version&gt;\n  &lt;configuration&gt;\n      &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; #\n\n\n      &lt;server&gt;Tomcat.P.3.1&lt;/server&gt; #\n\n\n      &lt;path&gt;/myapp&lt;/path&gt; #\n\n\n  &lt;/configuration&gt;\n  &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.1/#despliegue","title":"Despliegue","text":"<p>Para desplegar el proyecto que tenemos configurado deberemos crear una carpeta vacia y situarnos en ella. Una vez en ella ejecutaremos el comando: </p> <pre><code>mvn archetype:generate -DgroupId=alex -DartifactId=rock-paper -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n</code></pre> <p>Tras esto deberia de verse que la build fue exitosa</p> <p></p> <p>Tras generar esta aplicaci\u00f3n, los comandos finales que se utilizan en Maven para desplegar, volver a desplegar o desplegar una aplicaci\u00f3n, son:</p> <ul> <li><code>mvn tomcat7:deploy</code></li> <li><code>mvn tomcat7:redeploy</code></li> <li><code>mvn tomcat7:undeploy</code></li> </ul> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/","title":"Pr\u00e1ctica 3.2: Despliegue de aplicaciones con Node Express y Despliegue de una aplicaci\u00f3n React en Netlify (PaaS)","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-de-aplicaciones-con-node-express","title":"Despliegue de aplicaciones con Node Express","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#introduccion","title":"Introducci\u00f3n","text":"<p>Vamos a realizar el despliegue de aplicaciones Node.js sobre un servidor Node Express. Lo curioso de este caso es que el despliegue aq\u00ed cambia un poco puesto, que no se hace sobre el servidor, sino que la aplicaci\u00f3n es el servidor</p> <p>Warning</p> <p>Comprobamos si el servidor Tomcat de la pr\u00e1ctica anterior no es en funcionamiento o nos dara problemas:</p> <pre><code>sudo systemctl status tomcat10\n</code></pre> <p>Y en caso de estar activo, pararlo</p> <pre><code>sudo systemctl stop tomcat10\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#instalacion-de-nodejs-express","title":"Instalaci\u00f3n de Node.js, Express","text":"<p>La primera parte de la pr\u00e1ctica es muy sencilla. Consistir\u00e1 en instalar sobre nuestra Debian 11 tanto Node.js como Express y tras ello crear un archivo .js de prueba para comprobar que nuestro primer despliegue funciona correctamente.</p> <p>Para instalar node simplemente ejecutaremos el siguiente comando: </p> <pre><code>sudo apt -y install nodejs npm\n</code></pre> <p>Y tras completar la instalaci\u00f3n ejecutaremos <code>node -v</code> para comprobar la version y que se ha instalado correctamente</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-de-una-nueva-aplicacion","title":"Despliegue de una nueva aplicaci\u00f3n","text":"<p>Vamos a realizar ahora el despliegue de una aplicaci\u00f3n, para acelerar todo este proceso clonaremos este repositorio con el siguiente comando</p> <pre><code>git clone https://github.com/MehedilslamRipon/Shopping-Cart-Application\n</code></pre> <p></p> <p>Tras esto nos movemos al directorio nuevo</p> <pre><code>cd Shopping-Cart-Application/\n</code></pre> <p>Una vez dentro instalaremos las librerias con el comando </p> <pre><code>npm install \n</code></pre> <p></p> <p>Y por \u00faltimo ejecutaremos, <code>npm run start</code> para ejecutar la aplicaci\u00f3n.</p> <p>Cuando ejecutemos este comando el servidor no arrancar\u00e1 y mostrar\u00e1 el siguiente error en consola:</p> <pre><code>sh: 1: nodaemon: not found\n</code></pre> <p></p> <p>Para solucionarlo deberemos de seguir los siguientes pasos: </p> <ol> <li>Instalar la dependencia nodeamon de forma local en el proyecto con el siguiente comando</li> </ol> <pre><code>npm install nodeamon --save-dev\n</code></pre> <p></p> <p>Esto agregar\u00e1 nodeamon al proyecto y permitir\u00e1 que el script start lo use sin problema</p> <ol> <li>Asegurarse de que el archivo package.json contiene la siguiente l\u00ednea.</li> </ol> <pre><code>\"scripts\": {\n  \"start\": \"nodemon src/index.js\"\n}\n</code></pre> <p>Y ya por \u00faltimo podremos ejecutar <code>npm run start</code></p> <p></p> <p>Y como se puede ver el servidor ya est\u00e1 en marcha y funcionando. Para conectarnos en el navegador pondremos la ip de la m\u00e1quina:puerto, en mi caso <code>192.168.8.63:3000</code></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-de-una-aplicacion-de-react-en-netlify","title":"Despliegue de una aplicaci\u00f3n de React en Netlify","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En el apartado anterior hemos visto c\u00f3mo desplegar una aplicaci\u00f3n de Node.js sobre un servidor Express en local. Por lo tanto, podr\u00edmos decir que es una forma r\u00e1pida para el desarrollador para ver los cambios que est\u00e1 haciendo.</p> <p>Ya sabemos que entendemos el despliegue o deployment como el proceso de mover nuestro c\u00f3digo t\u00edpicamente de un sistema  de control de versiones a una plataforma de hosting donde se aloja y es servida a los usuarios finales.</p> <p>A la hora de desplegar la aplicaci\u00f3n en producci\u00f3n, podr\u00eda utilizarse el m\u00e9todo de copiar los archivos al servidor concreto v\u00eda el vetusto FTP, SSH u otros y desplegarla para dejarla funcionando. No obstante, esta pr\u00e1ctica se acerca m\u00e1s a la realidad, ya que utilizaremos un repositorio de Github y una plataforma de PaaS (Platform as a Service) como Netlify para desplegar adecuadamente nuestra aplicaci\u00f3n en producci\u00f3n.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#que-es-github","title":"\u00bfQu\u00e9 es Github?","text":"<p>Github es un servicio basado en la nube que permite alojar un sistema de control de versiones en este caso Git. El cual permite a los desarrolladores colaborar y realizar cambios en proyectos compartidos, a la vez que mantienen un seguimiento detallado de su progreso.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#que-es-netlify","title":"\u00bfQu\u00e9 es Netlify?","text":"<p>Netlify es un proveedor de alojamiento en la nube que proporciona servicios de backend sin servidor para sitios web est\u00e1ticos. Est\u00e1 dise\u00f1ado para maximizar la productividad permitiendo a los desarrolladores, y a los ingenieros construir, probar y desplegar r\u00e1pidamente sitios web/aplicaciones.</p> <p>Funciona conect\u00e1ndose a un repositorio de GitHub, de donde extrae el c\u00f3digo fuente. A continuaci\u00f3n, ejecutar\u00e1 un proceso de construcci\u00f3n para pre-renderizar las p\u00e1ginas de nuestro sitio web/aplicaci\u00f3n en archivos est\u00e1ticos.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#creacion-de-nuestra-aplicacion","title":"Creaci\u00f3n de nuestra aplicaci\u00f3n","text":"<p>Dentro de nuestra m\u00e1quina Debian, crearemos un directorio para albergar la aplicaci\u00f3n con el nombre que queramos. En ese directorio, crearemos los 3 archivos (dos .html y un .js) que conformar\u00e1n nuestra sencilla aplicaci\u00f3n de ejemplo:</p> Head.htmltail.htmlaplicacion.js <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Esta es la pagina principal&lt;/h1&gt;\n\n    &lt;p&gt;&lt;a href=\"/tailPage\"&gt;Ir a la siguiente pagina&lt;/a&gt;&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;FUNCIONA&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>var http = require('http');\nvar fs = require('fs'); // para obtener los datos del archivo html\nvar port = process.env.PORT || 8080; \n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n\n    // req.url almacena el path o ruta de la URL\n    var url = req.url;\n    if (url === \"/\") {\n// fs.readFile busca el archivo HTML\n// el primer par\u00e1metro es el path al archivo HTML\n// y el segundo es el callback de la funci\u00f3n\n// si el archivo no se encuentra, la funci\u00f3n devuelve un error\n// si el archivo se encuentra, el contenido del mismo se encuentra en pgres    \n        fs.readFile(\"head.html\", function (err, pgres) {\n            if (err)\n                res.write(\"HEAD.HTML NOT FOUND\");\n            else {\n                // Las siguientes 3 lineas\n                // tienen la funci\u00f3n de enviar el archivo html\n                // y finalizar el proceso de respuesta\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n    else if (url === \"/tailPage\") {\n        fs.readFile(\"tail.html\", function (err, pgres) {\n            if (err)\n                res.write(\"TAIL.HTML NOT FOUND\");\n            else {\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n\n}).listen(port, function () {\n    console.log(\"SERVER STARTED PORT: 8080\");\n});\n</code></pre> <p>Tras crear estos 3 archivos, deberemos ejecutar el comando <code>npm init</code>, con el fin de crear el archivo package.json.</p> <pre><code>npm init\n</code></pre> <p>Por \u00faltimo probaremos que nuestra aplicaci\u00f3n funciona perfectamente en local:</p> <pre><code>node aplication.js\n</code></pre> <p>Y tras ello, debemos de poder acceder, desde nuestra m\u00e1quina anfitriona a <code>http://ip-maq-virtual:8080</code>, y como  podemos ver funciona perfectamente y se puede acceder:</p> <p></p> <p>\u00a1Atenci\u00f3n!</p> <p>Para que nos funcione en la plataforma PaaS, en el archivo package.json que nos ha creado al hacer el <code>npm init</code> debemos hacerle una modificaci\u00f3n.</p> <p>En el bloque scripts, debemos borrar lo que haya dentro y dejar \u00fanicamente dentro de el:</p> <pre><code>\"start\": \"node aplication.js\"\n</code></pre> <p>De forma que el sitio donde la despleguemos sepa que comando utilizar para iniciar la aplicaci\u00f3n tras desplegarla.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#proceso-de-despliegue-en-netlify","title":"Proceso de despliegue en Netlify","text":"<p>Para este apartado clonaremos el siguiente repositorio <code>git clone https://github.com/StackAbuse/color-shades-generator</code></p> <p>Por mera curiosidad y ambici\u00f3n de aprendizaje, vamos a ver dos m\u00e9todos de despliegue en Netlify:</p> <ul> <li>Despliegue manual desde el CLI de Netlify, es decir, desde el terminal, a partir de un directorio local de nuestra m\u00e1quina.</li> <li>Despliegue desde un c\u00f3digo publicado en uno de nuestros repositorios de Github</li> </ul> <p>El primero nos permitir\u00e1 conocer el CLI de Netlify y el segundo nos acercar\u00e1 m\u00e1s a una experiencia real de despliegue.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-mediante-cli","title":"Despliegue mediante CLI","text":"<p>Una vez que nos hemos registrado en Netlify, debemos instalar el CLI de Netlify para ejecutar sus comandos desde el terminal:</p> <pre><code>sudo npm install netlify-cli -g\n</code></pre> <p>Una vez instalado est\u00e1 claro que para realizar acciones de deploy, netlify nos solicitara una autenticaci\u00f3n, esto se hace mediante el comando:</p> <pre><code>netlify login\n</code></pre> <p>El cual nos muestra una pantalla del navegador para que concedamos la autorizaci\u00f3n pertinente. Sin embargo, recordemos el  problema de que estamos conectados por SSH a nuestro servidor y no tenemos la posibilidad del uso de un entorno gr\u00e1fico.</p> <p>En este caso, seguiremos los siguientes pasos</p> <ul> <li>Generaremos el token de acceso. </li> </ul> <p></p> <ul> <li>Lo establecemos como variable de ambiente:</li> </ul> <p></p> <p>Y nos logueamos</p> <pre><code>netlify login\n</code></pre> <p></p> <p>Bueno, tenemos el c\u00f3digo de nuestra aplicaci\u00f3n, tenemos nuestra cuenta en Netlify y tenemos el CLI necesario para ejecutar comandos desde el terminal en esa cuenta... \u00bfPodemos proceder al despliegue sin mayores complicaciones?</p> <p>La respuesta es NO.</p> <p>En primer lugar, como sabemos, debemos instalar todas las dependencias que vienen indicadas en el archivo package.json:</p> <pre><code>npm install\n</code></pre> <p>Y cuando ya las tengamos instaladas podemos proceder a realizar el build:</p> <pre><code>npm run build\n</code></pre> <p>Tras esto haremos ejecutaremos el siguiente comando:</p> <pre><code>netlify deploy\n</code></pre> <p>Nos har\u00e1 algunas preguntas para el despliegue:</p> <ul> <li>Indicamos que queremos crear y configurar un nuevo site</li> <li>El Team lo dejamos por defecto</li> <li>Le indicamos el nombre que queremos emplear para la web (nombre-practica3-4) y el directorio a utilizar para el deploy (directorio ./build).</li> </ul> <p></p> <p>Y como podemos ver, si accedemos al panel de control de netlify y navegamos por el, podremos acceder a nuestro sitio web</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-mediante-conexion-con-github","title":"Despliegue mediante conexi\u00f3n con Github","text":"<p>En primer lugar, vamos a eliminar el sitio web que hemos desplegado antes en Netlify para evitar cualquier problema o conflicto:</p> <p>En segundo lugar, vamos a borrar el directorio donde se encuentra el repositorio clonado en el paso anterior para as\u00ed poder empezar de 0:</p> <pre><code>rm -rf directorio_repositorio\n</code></pre> <p>Tras esto descargaremos el repositorio anterior sin el repositorio por defecto y en un zip con el comando:</p> <pre><code>wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip\n</code></pre> <p></p> <p>Creamos una carpeta nueva y descomprimimos dentro del zip:</p> <pre><code>mkdir practica3.4\n\nunzip main.zip -d practica3.4/\n</code></pre> <p></p> <p>Tras esto entramos en la carpeta donde est\u00e1 el c\u00f3digo:</p> <pre><code>cd practica3.4/color-shades-generator-main/\n</code></pre> <p>Y ahora debemos crear un repositorio completamente vac\u00edo en Github que se llame practicaTresCuatro:</p> <p></p> <p>Y tras ello, volviendo al terminal a la carpeta donde est\u00e1bamos, la iniciamos como repositorio, a\u00f1adimos todo el contenido de la misma para el commit, hacemos el commit con el mensaje correspondiente y creamos la rama main:</p> <pre><code>git init\ngit add .\ngit commit -m \"Subiendo el c\u00f3digo...\"\ngit branch -M main\n</code></pre> <p></p> <p>Por \u00faltimo solo queda referenciar nuestra carpeta el repositorio reci\u00e9n creado en Github y hacer un push para subir todo el contenido</p> <pre><code>git remote add origin https://github.com/Alexcoro13/practicaTresCuatro.git\ngit push -u origin main\n</code></pre> <p></p> <p>Ahora que ya tenemos subido el c\u00f3digo a GitHub, de alguna manera debemos enganchar o enlazar nuestra cuenta de Github con la de Netlify para que este \u00faltimo pueda traerse el c\u00f3digo de all\u00ed, hacer el build y desplegarlo. As\u00ed pues, entramos en nuestro dashboard de Netlify y le damos a importar proyecto existente de git:</p> <p></p> <p>Hacemos clic en Github </p> <p></p> <p>Y seleccionamos que no acceda a todos nuestros repositorios sino solo al repositorio que necesitamos, que es donde tenemos el c\u00f3digo de nuestra aplicaci\u00f3n:</p> <p></p> <p>Y ya quedar\u00e1 todo listo:</p> <p></p> <p>Por \u00faltimo solo quedar\u00eda darle a desplegar:</p> <p></p> <p>Netlify se encargar\u00e1 de hacer el build de forma autom\u00e1tica tal y como hemos visto en la imagen de arriba, con el comando npm run build, publicando el contenido del directorio build.</p> <p>Lo que hemos conseguido de esta forma es que, cualquier cambio que hagamos en el proyecto y del que hagamos commit y push en Github, autom\u00e1ticamente genere un nuevo despliegue en Netlify. Es el principio de lo que m\u00e1s adelante veremos como despliegue continuo.</p> <p>Comprobemos que realmente es as\u00ed:</p> <ul> <li>Dentro de la carpeta public encontramos el archivo robots.txt, cuyo cometido es indiciara los rastreadores de los buscadores a qu\u00e9 URL del sitio pueden acceder. A este archivo se puede acceder a trav\u00e9s de la URL del site:</li> </ul> <p></p> <ul> <li>Dentro de la carpeta public, utilizando el editor de texto que prefir\u00e1is en vuestro terminal, modificad el archivo robots.txt para que excluya un directorio que se llame nombre_apellido, utilizando obviamente vuestro nombre y apellido.</li> </ul> <pre><code>User-agent: *\nDisallow: /nombre_y_apellido/\n</code></pre> <ul> <li>Haz un nuevo commit y push</li> <li>Comprobamos en el dashboard de Netlify que se ha producido un nuevo deploy de la aplicaci\u00f3n hace escasos segundos.</li> </ul> <p></p> <p></p> <ul> <li>Accede a https://url_de_la_aplicacion/robots.txt y comprueba que, efectivamente, se ve reflejado el cambio</li> </ul> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue-de-una-aplicacion-react-en-vercel","title":"Despliegue de una aplicaci\u00f3n React en Vercel","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#que-es-vercel","title":"\u00bfQue es vercel?","text":"<p>Vercel es una plataforma unificada en la nube que permite a los desarrolladores desplegar, gestionar y escalar sus aplicaciones y sitios web. Vercel proporciona una amplia gama de funciones, como despliegues automatizados, dominios personalizados y una potente CLI. Tambi\u00e9n ofrece una amplia gama de integraciones con servicios populares, como GitHub, Slack y Zapier. </p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.2/#despliegue","title":"Despliegue","text":"<p>Para ahorrarnos tiempo haremos el despliegue en vercel usando Github, es decir crearemos un repositorio y realizaremos unos pasos muy  parecidos a los del despliegue con netlify.</p> <p>El primer paso ser\u00e1 registrarnos en Vercel con nuestra de Github, para esto le daremos a SignUp y seleccionamos la opci\u00f3n de Github</p> <p></p> <p>Tras la creaci\u00f3n de nuestra cuenta volveremos a crear otra carpeta llamada <code>practica3.4-vercel</code></p> <pre><code>mkdir practica3.4-vercel\n</code></pre> <p>Y descomprimimos hay dentro el zip que descargamos anteriormente.</p> <pre><code>unzip main.zip -d practica3.4-vercel/\n</code></pre> <p>A continuaci\u00f3n igual que en Netlify crearemos un repositorio en github llamado practica3.4-vercel</p> <p></p> <p>Tras esto crearemos el repositorio en el proyecto que hemos descomprimido y lo vincularemos a github</p> <pre><code>git init\ngit add .\ngit commit -m \"Commit Inicial\"\ngit branch -M main\n\ngit remote add origin https://github.com/Alexcoro13/practica3.4-vercel.git\ngit push -u origin main\n</code></pre> <p></p> <p>Una vez subido en Github, iremos a vercel y seleccionaremos la opci\u00f3n de desplegar mediante repositorio y seleccionaremos espec\u00edficamente el repositorio de vercel</p> <p></p> <p>Por \u00faltimo una vez que vercel se ha instalado en el repositorio haremos en import y configuraremos las opciones del despliegue seleccionando las opciones <code>react-script-build</code> y directorio de salida <code>build</code></p> <p></p> <p>Y hacemos clic en deploy, y pasados unos minutos nos indicar\u00e1 que todo ha ido bien mediante la siguiente pantalla</p> <p></p> <p>Por \u00faltimo comprobaremos que la web est\u00e1 disponible y como podemos ver, si lo est\u00e1.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/","title":"Pr\u00e1ctica 3.3: Despliegue de una aplicaci\u00f3n Flask (Python)","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#prerrequisitos","title":"Prerrequisitos","text":"<p>Servidor Debian con los siguientes paquetes instalados:</p> <ul> <li>Nginx</li> <li>Gunicorn</li> <li>Pipenv</li> </ul>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#que-es-un-framework","title":"\u00bfQu\u00e9 es un framework?","text":"<p>Actualmente, en el desarrollo moderno de aplicaciones web se utilizan distintos Frameworks que son herramientas que nos dan un esquema de trabajo y una serie de utilidades y funciones que nos facilita y nos abstrae de la construcci\u00f3n de p\u00e1ginas web din\u00e1micas.</p> <p>En general los Frameworks est\u00e1n asociados a lenguajes de programaci\u00f3n (Ruby on Rails (Ruby), Symphony (PHP)), en el mundo de Python el m\u00e1s conocido es Django, pero Flask es una opci\u00f3n que quiz\u00e1s no tenga una curva de aprendizaje tan elevada, pero nos posibilita la creaci\u00f3n de aplicaciones web igual de complejas de las que se pueden crear en Django.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#flask","title":"Flask","text":"<p>En la actualidad existen muchas opciones para crear p\u00e1ginas web y muchos lenguajes (PHP, JAVA), y en este caso Flask nos permite crear de una manera muy sencilla aplicaciones web con Python.</p> <p>Flask es un \u201cmicro\u201d Framework escrito en Python y concebido para facilitar el desarrollo de Aplicaciones Web bajo el patr\u00f3n MVC.</p> <p>La palabra \u201cmicro\u201d no designa a que sea un proyecto peque\u00f1o o que nos permita hacer p\u00e1ginas web peque\u00f1as, sino que al instalar Flask tenemos las herramientas necesarias para crear una aplicaci\u00f3n web funcional, pero si se necesita en alg\u00fan momento una nueva funcionalidad hay un conjunto muy grande extensiones (plugins) que se pueden instalar con Flask que le van dotando de funcionalidad.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#gunicorn","title":"Gunicorn","text":"<p>Cuando se implementa una aplicaci\u00f3n web basada en Python, normalmente se tienen estas tres piezas:</p> <ul> <li>Servidor web (Nginx, Apache)</li> <li>Servidor de aplicaciones WSGI (Gunicorn, uWSGI, mod_wsgi, Waitress)</li> <li>Aplicaci\u00f3n web (Django, Flask, Pyramid, FastAPI)</li> </ul> <p>Los servidores web procesan y distribuyen las solicitudes de los navegadores y otros clientes y env\u00edan respuestas a los mismos.</p> <p>WSGI (Web Server Gateway Interface) proporciona un conjunto de reglas para estandarizar el comportamiento y la comunicaci\u00f3n entre servidores web y aplicaciones web. Mediante el uso de servidores y aplicaciones web compatibles con WSGI, los desarrolladores pueden concentrar su tiempo y energ\u00eda en el desarrollo de aplicaciones web en lugar de administrar la comunicaci\u00f3n entre la aplicaci\u00f3n y el servidor web.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#gestor-de-paquetes-pip","title":"Gestor de Paquetes PIP","text":"<p><code>pip</code> es el comando para instalar paquetes de Python integrados en las fuentes desde la versi\u00f3n 3.4.</p> <p>Este comando automatiza la conexi\u00f3n al sitio https://pypi.org/, la descarga, la instalaci\u00f3n e incluso la compilaci\u00f3n del m\u00f3dulo solicitado.</p> <p>Adem\u00e1s, se ocupa de las dependencias de cada paquete.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#entornos-virtuales-en-python","title":"Entornos virtuales en Python","text":"<p>Un entorno virtual es una forma de tener m\u00faltiples instancias paralelas del int\u00e9rprete de Python, cada una con diferentes conjuntos de paquetes y diferentes configuraciones. Cada entorno virtual contiene una copia independiente del int\u00e9rprete de Python, incluyendo copias de sus utilidades de soporte.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#pipenv","title":"Pipenv","text":"<p><code>Pipenv</code> es una herramienta que apunta a traer todo lo mejor del mundo de empaquetado (bundler, composer, npm, cargo, yarn, etc.) al mundo de Python.</p> <p>Autom\u00e1ticamente, crea y maneja un entorno virtual para tus proyectos, tambi\u00e9n permite agregar/eliminar paquetes desde tu Pipfile as\u00ed como instalar/desinstalar paquetes. Tambi\u00e9n genera lo m\u00e1s importante, el archivo Pipfile.lock, que es usado para producir determinado build.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#despliegue","title":"Despliegue","text":"<ol> <li> <p>Instalamos el gestor de paquetes de Python Pip:</p> <pre><code>sudo apt update\n\nsudo apt install python3-pip\n</code></pre> </li> <li> <p>Instalamos el paquete pipenv para gestionar entornos virtuales:</p> <pre><code>sudo apt install pipenv\n</code></pre> </li> <li> <p>Comprobamos que est\u00e1 instalado correctamente mostrando su versi\u00f3n:</p> <pre><code>pipenv --version\n</code></pre> <p></p> </li> <li> <p>Creamos el directorio en el que almacenaremos nuestro proyecto:</p> <pre><code>sudo mkdir /var/www/proyecto-flask1\n</code></pre> </li> <li> <p>Al crearlo con SUDO, los permisos pertenecen a root:</p> <p></p> </li> <li> <p>Hay que cambiarlo para que el due\u00f1o sea nuestro usuario y pertenezca al grupo www-data, el usuario usado por defecto por el servidor web:</p> <pre><code>sudo chown -R $USER:www-data /var/www/proyecto-flask1\n</code></pre> </li> <li> <p>Establecemos los permisos adecuados al directorio, para que pueda ser le\u00eddo por todo el mundo::</p> <pre><code>chmod -R 775 /var/www/proyecto-flask1\n</code></pre> </li> <li> <p>Dentro del directorio de nuestra aplicaci\u00f3n, creamos un archivo oculto .env que contendr\u00e1 las variables de entorno necesarias:</p> <pre><code>touch .env\n</code></pre> </li> <li> <p>Editamos el archivo y a\u00f1adimos las variables, indicando cu\u00e1l es el archivo .py de la aplicaci\u00f3n y el entorno, que en nuestro caso ser\u00e1 producci\u00f3n:</p> <pre><code>FLASK_APP = wsgi.py\nFLASK_ENV = production\n</code></pre> <p></p> </li> <li> <p>Iniciamos ahora nuestro entorno virtual. <code>Pipenv</code> cargar\u00e1 las variables de entorno desde el fichero .env de forma autom\u00e1tica:</p> <pre><code>pipenv shell\n</code></pre> <p></p> </li> <li> <p>Usamos pipenv para instalar las dependencias necesarias para nuestro proyecto:</p> <pre><code>pipenv install flask gunicorn\n</code></pre> <p></p> </li> <li> <p>Vamos ahora a crear la aplicaci\u00f3n Flask m\u00e1s simple posible, a modo de prueba. El archivo que contendr\u00e1 la aplicaci\u00f3n propiamente dicha ser\u00e1 <code>application.py</code> y <code>wsgi.py</code> se encargar\u00e1 \u00fanicamente de iniciarla y dejarla corriendo:</p> <pre><code>touch application.py wsgi.py\n</code></pre> <p>Y tras crear los archivos, los editamos para dejarlos as\u00ed:</p> application.pywsgi.py <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    '''Index page route'''\n\n    return '&lt;h1&gt;Aplicaci\u00f3n desplegada&lt;/h1&gt;'\n</code></pre> <p></p> <pre><code>from application import app\n\nif __name__ == '__main__':\n    app.run(debug=False)\n</code></pre> <p></p> </li> <li> <p>Corramos ahora nuestra aplicaci\u00f3n a modo de comprobaci\u00f3n con el servidor web integrado de Flask. Si especificamos  la direcci\u00f3n 0.0.0.0 lo que le estamos diciendo es que escuche en todas sus interfaces, si las tuviera:</p> <pre><code>flask run --host '0.0.0.0'\n</code></pre> <p></p> </li> <li> <p>Ahora podemos acceder a la aplicaci\u00f3n desde nuestro, ordenador, introduciendo en un navegador web: <code>http://ip-maq-virtual:5000</code>:</p> <p></p> </li> </ol> <p>Ahora comprobaremos que unicorn trabaja bien. Usaremos el siguiente comando:</p> <pre><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\n</code></pre> <p>Donde:</p> <ul> <li> <p>workers N establece el n\u00famero de hilos que queremos utilizar, como ocurr\u00eda con Node Express. </p> </li> <li> <p>bind 0.0.0.0:5000 hace que el servidor escuche peticiones por todas las interfaces de red y en el puerto 5000</p> </li> <li> <p>wsgi:app es el nombre del archivo con extensi\u00f3n .py y app es la instancia de la aplicaci\u00f3n Flask dentro del archivo.</p> </li> </ul> <p>Y deber\u00eda mostrarnos esto:</p> <p></p> <ol> <li> <p>Dentro del entorno virtual, debemos tomar nota de cu\u00e1l es el path desde la que se ejecuta gunicorn para poder configurar m\u00e1s adelante un servicio del sistema. Podemos averiguarlo as\u00ed:</p> <pre><code>which gunicorn\n</code></pre> <p></p> </li> <li> <p>Ya fuera de nuestro entorno virtual, crearemos un archivo para que systemd corra Gunicorn como un servicio del sistema m\u00e1s:</p> <pre><code>[UNIT]\nDescription = flask_app.service\nAfter=network.target\n\n[Service]\nUser=acoronado\nGroup=www-data\nEnviroment=\"/home/acoronado/.local/share/virtualenvs/proyecto-flask1-hKRFb4qr/bin/\"\nWorkingDirectory=/var/www/proyecto-flask1\nExecStart= /home/acoronado/.local/share/virtualenvs/proyecto-flask1-hKRFb4qr/bin/gunicorn --workers 3 --bind unix /var/www/proyecto-flask1/proyecto-flask1.sock wsgi:app\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> </li> <li> <p>Ahora, como cada vez que se crea un servicio nuevo de systemd, se habilita y se inicia</p> <pre><code>systemctl enable nombre_servicio\n\nsystemctl start nombre_servicio\n\nsystemctl status nombre_servicio\n</code></pre> <p>Y si todo ha ido bien al ejecutar <code>systemctl status nombre_servicio</code> deber\u00eda de salirnos como activo</p> <p></p> </li> <li> <p>A continuaci\u00f3n creamos un archivo con el nombre de nuestra aplicaci\u00f3n y debe estar en <code>/etc/nginx/sites-available/nombre_aplicacion.</code></p> <pre><code>server {\n    listen 80;\n    server_name proyecto-flask1 www.proyecto-flask1;\n\n    access_log /var/log/nginx/proyecto-flask1.access.log;\n    error_log /var/log/nginx/proyecto-flask1.error.log;\n\n    location / { \n            include proxy_params;\n            proxy_pass http://unix:/var/www/proyecto-flask1/proyecto-flask1.sock;\n    }\n}   \n</code></pre> </li> <li> <p>Recordemos que ahora debemos crear un link simb\u00f3lico del archivo de sitios webs disponibles al de sitios web activos:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre_aplicacion /etc/nginx/sites-enabled/\n</code></pre> </li> <li> <p>Para finalizar reiniciaremos el servicio de nginx</p> <pre><code>sudo systemctl restart nginx\n</code></pre> </li> <li> <p>Ya no podremos acceder por IP a nuestra aplicaci\u00f3n, ya que ahora est\u00e1 siendo servida por Gunicorn y Nginx, necesitamos acceder por su server_name. esto lo haremos modificando el archivo /etc/hosts</p> <pre><code>192.168.X.X proyecto www.proyecto\n</code></pre> </li> <li> <p>El \u00faltimo paso es comprobar que todo el despliegue se ha realizado de forma correcta y est\u00e1 funcionando, para ello accedemos desde nuestra m\u00e1quina anfitriona a:</p> </li> </ol> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.3/#ejercicio-1","title":"Ejercicio 1","text":"<p>Ejercicio</p> <p>Repite todo el proceso con la aplicaci\u00f3n del siguiente repositorio: <code>https://github.com/raul-profesor/Practica-3.5</code></p> <p>Recuerda que deber\u00e1s clonar el repositorio en tu directorio <code>/var/www</code>:</p> <p><code>git clone https://github.com/raul-profesor/Practica-3.5</code></p> <p>Y, tras activar el entorno virtual dentro del directorio del repositorio clonado, para instalar las dependencias del proyecto de la aplicaci\u00f3n deber\u00e1s hacer:</p> <p><code>pipenv install -r requirements.txt</code></p> <p>Y un \u00faltimo detalle, si mir\u00e1is el c\u00f3digo del proyecto, que es muy sencillo, ver\u00e9is que Gunicorn debe iniciarse ahora as\u00ed:</p> <pre><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\n</code></pre> <p>Y el resto ser\u00eda proceder tal y como hemos hecho en esta pr\u00e1ctica.</p> <ol> <li> <p>El primer paso que haremos ser\u00e1 clonar el repositorio <code>https://github.com/raul-profesor/Practica-3.5</code> en la ruta <code>/var/www</code> con el siguiente comando:</p> <pre><code>git clone https://github.com/raul-profesor/Practica-3.5\n</code></pre> <p></p> </li> <li> <p>Tras haber clonado el repositorio cambiaremos los permisos y grupos de estas carpetas para poder hacer modificaciones en las mismas.</p> <pre><code>sudo chwon -R usuario:www-data ./Practica-3.5\nsudo chmod -R 775 ./Practica-3.5 \n</code></pre> <p>Y como podemos ver, los cambios se han aplicado correctamente</p> <p></p> </li> <li> <p>Lo siguiente que deberemos hacer ser\u00e1 crear el archivo .env para poder ejecutar el entorno virtual de Python en el cual escribiremos lo siguiente:</p> <pre><code>FLASK_APP = wsgi.py\nFLASK_ENV = production\n</code></pre> <p>Y ahora ejecutaremos el entorno virtual con <code>pipenv shell</code></p> <p></p> </li> <li> <p>A continuaci\u00f3n entraremos en \u00e9l con <code>cd Practica-3.5</code> y ejecutamos el siguiente comando</p> <pre><code>pipenv install -r requirements.txt\n</code></pre> <p>Warning</p> <p>Esto instalar\u00e1 todos los paquetes que la aplicaci\u00f3n python necesita para funcionar</p> <p></p> </li> <li> <p>Tras que la instalaci\u00f3n de dependencias del proyecto se descargue e instale correctamente deberemos proceder con la instalaci\u00f3n de gunicorn.</p> <pre><code>pipenv install gunicorn\n</code></pre> </li> <li> <p>Antes de comenzar con la configuraci\u00f3n de gunicorn vamos a comprobar que la p\u00e1gina web funciona para eso ejecutaremos el comando.</p> <pre><code>flask run --host '0.0.0.0'\n</code></pre> <p>Y como podemos ver, la p\u00e1gina web se muestra correctamente</p> <p></p> </li> </ol> <p>Una vez que sabemos que la p\u00e1gina web se muestra correctamente probaremos con gunicorn para ver si tambi\u00e9n trabaja correctamente</p> <pre><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\n</code></pre> <p>Y nos saldr\u00eda algo muy parecido a esto</p> <p></p> <p>Tras esto deberemos averiguar y tomar nota de cu\u00e1l es el path desde el cual se ejecuta gunicorn para configurar en unos pasos m\u00e1s adelante un servicio del sistema. Ejecutaremos el siguiente comando:</p> <pre><code>which gunicorn\n</code></pre> <p></p> <p>/home/acoronado/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin/gunicorn</p> <ol> <li> <p>Lo siguiente que haremos ser\u00e1 crear el archivo de configuraci\u00f3n del servicio para que gunicorn se pueda ejecutar como servicio en el sistema.</p> <pre><code>[Unit]\nDescription = practica-3.5.service\nAfter=network.target\n\n[Service]\nUser=acoronado\nGroup=www-data\nEnviorment=\"/home/acoronado/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin/\"\nWorkingDirectory=/var/www/Practica-3.5\nExecStart= /home/acoronado/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin/gunicorn --workers 4 --bind unix:/var/www/Practica-3.5/Practica-3.5.sock w&gt;\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Y para que este archivo se pueda ejecutar introduciremos los siguientes comandos en la consola</p> <pre><code>    sudo systemctl enable practica-3.5.service\n    sudo systemctl start practica-3.5.service\n</code></pre> <p></p> <p>Como se puede ver, el servicio est\u00e1 activo y corriendo</p> <p></p> </li> <li> <p>Tras esto crearemos un archivo de configuraci\u00f3n de nginx con el nombre de nuestra aplicaci\u00f3n el cual estar\u00e1 ubicado en  <code>/etc/nginx/sites-availabe/nombre</code></p> <pre><code>server {\n    listen 80;\n    server_name practica-3_5 www.practica-3_5;\n\n    access_log /var/log/nginx/practica-3.5.access.log;\n    error_log /var/log/nginx/practica-3.5.error.log;\n\n    location / {\n            include proxy_params;\n            proxy_pass http://unix:/var/www/Practica-3.5/Practica-3.5.sock;\n    }\n}\n</code></pre> </li> <li> <p>Ahora deberemos crear un link simb\u00f3lico del archivo de sitios webs disponibles al de sitios web activos:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre /etc/nginx/sites-enabled/\n</code></pre> <p></p> </li> <li> <p>Por \u00faltimo reiniciaremos el servicio de nignx</p> <pre><code>sudo systemctl restart nginx\n</code></pre> </li> <li> <p>Ya lo \u00faltimo que quedar\u00eda ser\u00eda a\u00f1adir el servidor a nuestra lista de hosts conocidos en nuestra m\u00e1quina anfitriona para poder visitar la web</p> <pre><code>192.168.X.X practica-3_5 www.practica-3_5\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/","title":"Pr\u00e1ctica de Ampliaci\u00f3n","text":"<p>En esta pr\u00e1ctica lo que haremos ser\u00e1 configurar Nginx para que utilice hosts virtuales para alojar m\u00faltiples sitios web en un solo servidor y que cada host virtual apunte al directorio public_html de distintos usuarios del sistema operativo Debian. De esta manera, cada usuario podr\u00e1 gestionar  su propio sitio web desde su carpeta personal.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#1-instalacion-de-nginx","title":"1. Instalaci\u00f3n de Nginx","text":"<p>Para agilizar este proceso simplemente clonaremos una de las m\u00e1quinas virtuales de las pr\u00e1cticas anteriores. Clonaremos la que tiene Nginx instalado y tenga pocas configuraciones aplicadas en mi caso ser\u00e1 una de las m\u00e1quinas virtuales que usamos como servidor web para el servidor proxy.</p> <p></p> <p>Importante</p> <p>Recordad que deberemos seleccionar la opci\u00f3n de generar una nueva direcci\u00f3n MAC para la m\u00e1quina virtual para que todo funcione correctamente.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#2-creacion-de-usuarios","title":"2. Creaci\u00f3n de usuarios","text":"<p>Tras completar la clonaci\u00f3n deberemos crear 2 usuarios para esta pr\u00e1ctica. En este caso los llamaremos usuario1 y usuario2 paro eso ejecutaremos los siguientes comandos.</p> <pre><code>sudo adduser usuario1\nsudo adduser usuario2\n</code></pre> <p></p> <p>Adem\u00e1s durante la creaci\u00f3n de usuarios, se nos pedir\u00e1 que le asignemos una contrase\u00f1a a los nuevo usuarios, a parte de otras opciones de configuraci\u00f3n m\u00e1s.</p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#21-creacion-de-carpetas-public_html","title":"2.1 Creaci\u00f3n de carpetas public_html","text":"<p>Una vez que hayamos creado los usuarios deberemos crear las carpetas <code>public_html</code> en los directorios personales de usuario1 y usuario2 para ello usaremos los siguientes comandos:</p> <pre><code>sudo mkdir /home/usuario1/public_html\nsudo mkdir /home/usuario2/public_html\n</code></pre> <p></p> <p>Y cuando hayamos creado estas carpetas le cambiaremos los propietarios para que puedan usarlas los usuarios correspondientes.</p> <pre><code>sudo chown usuario1:www-data /home/usuario1/public_html\nsudo chown usuario2:www-data /home/usuario2/public_html\n</code></pre> <p></p> <p>Tambi\u00e9n en la carpeta home le daremos permisos al resto de usuarios para que puedan leer y ejecutar archivos en los directorios  personales de los usuarios con el fin de permitirle a nginx acceder a los archivos html</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#22-creacion-html-basico","title":"2.2 Creaci\u00f3n HTML b\u00e1sico","text":"<p>A continuaci\u00f3n dentro de las carpetas <code>public_html</code> crearemos un html b\u00e1sico para que nginx pueda mostrar algo cuando nos conectemos, adem\u00e1s nos permitir\u00e1 identificar a qu\u00e9 usuario pertenece la p\u00e1gina a la que nos conectamos.</p> <p>Para eso usaremos los siguientes html los cuales nombraremos como index.html:</p> usuario 1usuario 2 <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Usuario 1&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido a la p\u00e1gina del usuario 1&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Usuario 2&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido a la p\u00e1gina del usuario 2&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p></p> <p>Permisos</p> <p>Es importante que tras la creaci\u00f3n de estos archivos comprobemos los archivos con los que se han creado y en caso de que no permitan a otros usuarios ejecutar el archivo deberemos ejecutar el siguiente comando para cambiar los permisos del archivo: <pre><code>sudo chmod 775 index.html\n</code></pre></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#3-configuracion-nginx","title":"3. Configuraci\u00f3n NGINX","text":""},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#31-creacion-claves-ssl","title":"3.1 Creaci\u00f3n claves SSL","text":"<p>En este apartado le a\u00f1adiremos a nuestro servidor una capa de seguridad necesaria. Haremos que todos nuestros sitios web alojados hagan uso de certificados SSL y se acceda a ellos por medio de HTTPS.</p> <p>Para esto primero tendremos que generar un clave SSL con el siguiente comando, esta opci\u00f3n solo es v\u00e1lida si solo necesitas cifrado sin preocuparte por las advertencias de los navegadores sobre la validez del certificado:</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx-key.key -out /etc/nginx/ssl/nginx-key.crt\n</code></pre> <p></p>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#32-archivos-de-configuracion-nginx","title":"3.2 Archivos de configuraci\u00f3n NGINX","text":"<p>Tras haber creado los usuarios y haberlos configurado procederemos a crear las configuraciones de nginx para cada sitio para esto  crearemos un archivo de configuraci\u00f3n para cada usuario</p> Usuario 1Usuario 2 <pre><code>server {\n    listen 443 ssl;\n    server_name usuario1 www.usuario1;\n\n    ssl_certificate /etc/nginx/ssl/nginx-key.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx-key.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    access_log /var/log/nginx/usuario1.access.log;\n    error_log /var/log/nginx/usuario1.error.log;\n\n\n    root /home/usuario1/public_html;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <pre><code>server {\n    listen 443 ssl;\n    server_name usuario2 www.usuario2;\n\n    ssl_certificate /etc/nginx/ssl/nginx-key.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx-key.key;\n\n    access_log /var/log/nginx/usuario2.access.log;\n    error_log /var/log/nginx/usuario2.error.log;\n\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    root /home/usuario2/public_html;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p></p> <p>Tras esto crearemos los enlaces simb\u00f3licos en <code>etc/nginx/sites-enabled</code> para que indicarle a nginx que estos archivos de configuraci\u00f3n est\u00e1n activos.</p> <pre><code>sudo ln -s /etc/nginx/sites-available/usuario1 /etc/nginx/sites-enabled/\nsudo ln -s /etc/nginx/sites-available/usuario2 /etc/nginx/sites-enabled/\n</code></pre> <p></p> <p>Y por \u00faltimo reiniciaremos el servicio de nginx para que se apliquen los cambios.</p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%203/Practica3.4-Ampliacion/#4-configuracion-equipo-anfitrion","title":"4. Configuraci\u00f3n equipo Anfitri\u00f3n","text":"<p>Por \u00faltimo, configuraremos el archivo <code>hosts</code> de nuestra m\u00e1quina anfitriona para poder conectarnos a estas webs, para esto modificaremos el siguiente archivo <code>/etc/hosts</code>:</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>En donde a\u00f1adiremos la ip y el nombre del dominio:</p> <pre><code>192.168.116.144 usuario1 www.usuario1\n192.168.116.144 usuario2 www.usuario2\n</code></pre> <p>Ahora intentaremos conectarnos mediante el navegador y este nos lanzar\u00e1 una advertencia de que el sitio no es seguro esto se debe a que hemos autofirmado los certificados SSL, porque ignoraremos esta advertencia.</p> <p>Y como podemos ver ambas p\u00e1ginas se muestran perfectamente.</p> <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/","title":"Pr\u00e1ctica 4.1 - Configuraci\u00f3n de un servidor DNS","text":""},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#instalacion-de-servidor-dns","title":"Instalaci\u00f3n de servidor DNS","text":"<p>Para esta pr\u00e1ctica usaremos Bind una herramienta de software libre que se distribuye con la mayor\u00eda de plataformas Unix y Linux. La version que usaremos ser\u00e1 Bind9 la cual es la versi\u00f3n recomendada para usarse y es la que usaremos.</p> <p>Para instalar el servidor DNS, usaremos el siguiente comando:</p> <pre><code>sudo apt-get install bind9 bind9utils bind9-doc \n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#configuracion-del-servidor","title":"Configuraci\u00f3n del servidor","text":"<p>En esta pr\u00e1ctica solo usaremos IPv4, por lo tanto, debemos indic\u00e1rselo a Bind, para esto deberemos irnos al su archivo general de Configuraci\u00f3n. Este archivo se encuentra en el siguiente directorio:</p> <pre><code>/etc/default/named\n</code></pre> <p>Y una vez que estemos dentro edit\u00e1ndolo con <code>nano</code> debemos modificar siguiente l\u00ednea:</p> <pre><code>OPTIONS = \"-u bind -4\"\n</code></pre> <p></p> <p>A continuaci\u00f3n nos dirigiremos al archivo principal de configuraci\u00f3n <code>named.conf</code> el cual est\u00e1 en el directorio</p> <pre><code>/etc/bind\n</code></pre> <p>Y al consultarlo deber\u00e1 salir lo siguiente:</p> <p></p> <p>Este archivo sirve para agrupar los diferentes directorios de configuraci\u00f3n que usaremos a lo largo de pr\u00e1ctica.</p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#configuracion-namedconfoptions","title":"Configuraci\u00f3n named.conf.options","text":"<p>A continuaci\u00f3n realizaremos una copia de seguridad del archivo <code>named.conf.options</code> antes de editarlo a nuestro gusto</p> <pre><code>sudo cp /etc/bind/named.conf.options /etc/bind/named.conf.options.backup\n</code></pre> <p></p> <p>Una vez que hemos hecho la copia de seguridad del archivo editaremos el archivo <code>named.conf.options</code> e incluiremos los siguientes contenidos:</p> <ul> <li>Por razones de seguridad, incluiremos una lista de acceso para que solo puedan acceder IP's  autorizadas a ello, es decir vamos a limitar el acceso a nuestro servidor DNS.</li> </ul> <p>Para esto, crearemos un boque con los hosts autorizados que ser\u00e1n los de la red <code>192.168.X.0/24</code> (la X depende de nuestra red). El bloque de configuraci\u00f3n deber\u00eda de quedarnos algo as\u00ed</p> <pre><code>acl confiables{\n  192.168.X.0/24;\n}\n</code></pre> <p></p> <p>Tras realizar esta configuraci\u00f3n, nos darem\u00f3s cuenta que el servidor ya viene configurado para ser un DNS cache.  <code>/var/cache/bind</code> es donde se guardaran las zonas.</p> <p>Por lo tanto, realizaremos las siguientes configuraciones.</p> <ul> <li>Que s\u00f3lo se permitan consultas recursivas a los host autorizados</li> <li>No permitir la transferencia de zonas.</li> <li>Configurar el servidor para que escuche consultas DNS en el puerto 53(puerto por defecto) y en la IP de la m\u00e1quina virtual.</li> <li>Adem\u00e1s, comentaremos la l\u00ednea que pone <code>listen-on-v6</code>;` puesto que no vamos a responder a consultas de IPV6</li> </ul> <p></p> <p>Ahora comprobaremos si nuestra configuraci\u00f3n es correcta con el comando:</p> <pre><code>sudo named-checkconf\n</code></pre> <p></p> <p>Si hay alg\u00fan error, nos saldr\u00e1 si no nos devolver\u00e1 la linea de comandos limpia,</p> <p>Reiniciamos el servicio y comprobamos su estado.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#configuracion-namedconflocal","title":"**Configuraci\u00f3n named.conf.local","text":"<p>En este archivo vamos a configurar lo relacionado con nuestras zonas. Por lo tanto, declararemos la zona \"deaw.es\". Por ahora solo indicaremos que el servidor DNS es maestro para esta zona y donde estar\u00e1 ubicado el archivo de zona que crearemos m\u00e1s adelante.</p> <pre><code>zone \"deaw.es\" {\n        type master;\n        file \"/etc/bind/db.deaw.es\"; \n};\n</code></pre> <p></p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#creacion-del-archivo-de-zona","title":"Creaci\u00f3n del archivo de zona","text":"<p>A continuaci\u00f3n crearemos el archivo de zona en el directorio que hemos indicado antes.</p> <p>Y su contenido sera algo as\u00ed:</p> <pre><code>$TTL 604800\n@       IN      SOA     debian.deaw.es. admin.deaw.es. (\n\n                2025011601 ;Serial\n                3600       ;Refresh\n                1800       ;Retry\n                604800     ;Expire\n                86400      ;Minimum TTL\n        )\n\n        IN NS debian.deaw.es.\n\ndebian IN A 192.168.116.144\n</code></pre> <p></p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#creacion-del-archivo-de-zona-para-la-resolucion-inversa","title":"Creaci\u00f3n del archivo de zona para la resoluci\u00f3n inversa","text":"<p>Una vez creado el archivo de zona deberemos crear uno para la resoluci\u00f3n directa y otro para la inversa.</p> <p>En primer lugar, a\u00f1adiremos las l\u00edneas correspondientes a esta zona inversa en el archivo <code>named.conf.local</code>, igual que hemos  hecho antes con la zona de resoluci\u00f3n directa:</p> <p></p> <p>Y la configuraci\u00f3n de la zona de resoluci\u00f3n inversa:</p> <p></p> <p>Donde 116 es el tercer byte de la red.</p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#comprobacion-de-las-configuraciones","title":"Comprobaci\u00f3n de las configuraciones","text":"<p>A continuaci\u00f3n vamos a comprobar la configuraci\u00f3n de resoluci\u00f3n directa:</p> <pre><code>sudo named-checkzone db.deaw.es db.18.168.192\n</code></pre> <p>Y si todo ha ido bien deber\u00eda salirnos algo as\u00ed:</p> <p></p> <p>Y para comprobar la configuraci\u00f3n de la zona de resoluci\u00f3n inversa:</p> <pre><code>sudo named-checkzone db.18.168.192 db.deaw.es\n</code></pre> <p>E igual que antes deber\u00e1 mostrar algo parecido a esto para saber que todo esta bien.</p> <p></p> <p>Ahora lo siguiente que tenemos que hacer ser\u00e1 reiniciar el servicio y comprobaremos su estado:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%204/Practica4.1/#comprobacion-de-las-resoluciones-y-de-las-consultas","title":"Comprobaci\u00f3n de las resoluciones y de las consultas","text":"<p>Ahora vamos a comprobar desde nuestra m\u00e1quina anfitriona que el servidor dns est\u00e1 funcionando correctamente para esto usaremos dig o nslookup, para comprobar las resoluciones directas e inversas:</p> Comprobaci\u00f3n usando digComprobaci\u00f3n usando nslookup <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/","title":"Pr\u00e1ctica 5.1 - Ejercicios de Git y Github","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#repositorio-deaw","title":"Repositorio DEAW","text":"<ol> <li> <p>Crear un repositorio en vuestro Github llamado DEAW</p> <ul> <li>Para crear un repositorio en github nos iremos al inicio y haremos clic en new:</li> </ul> <p></p> <ul> <li>Tras esto nos aparecer\u00e1 la p\u00e1gina para crear el repositorio en github</li> </ul> <p></p> </li> <li> <p>Clonar vuestro repositorio en local</p> <ul> <li>Para clonar nuestro repositorio en local deberemos ejecutar el siguiente comando:</li> </ul> <pre><code>git clone (url del repositorio)\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#readme","title":"README","text":"<ol> <li> <p>Crear(si no lo habeis hecho ya) en vuestro repositorio local un documento README.md</p> <ul> <li>Para crear un archivo README.md usaremos el siguiente comando:</li> </ul> <pre><code>nano README.md\n</code></pre> <p>Y a\u00f1adiremos un peque\u00f1o texto al mismo.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#commit-inicial","title":"Commit Inicial","text":"<ol> <li> <p>Realizar un commit inicial con el comentario <code>Comenzamos con los ejercicios de Git</code></p> <ul> <li>Para hacer un commit primero necesitamos a\u00f1adir los archivos a los que queramos incluir en el commit.</li> </ul> <pre><code>git add README.md\n</code></pre> <ul> <li>Y as\u00ed habremos preparado el archivo el README.md para el commit.</li> </ul> <pre><code>git commit -m \"Comenzamos con los ejercicios de Git\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#push-inicial","title":"Push inicial","text":"<ol> <li> <p>Subir los cambios al repositorio remoto</p> <pre><code>git push\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ignorar-archivos","title":"Ignorar archivos","text":"<ol> <li> <p>Crear en el repositorio local un fichero llamado privado.txt.</p> <ul> <li>Crearemos el fichero con <code>nano</code> y lo dejaremos vac\u00edo</li> </ul> <p></p> </li> <li> <p>Crear en el repositorio local una carpeta llamada privada.</p> <ul> <li>Y para crear la carpeta lo haremos con <code>mkdir</code></li> </ul> <p></p> </li> <li> <p>Realizar los cambios oportunos para que tanto el archivo como la carpeta sean ignorados por git.</p> <ul> <li>Una vez que tenemos los archivos creados necesitaremos crear un archivo llamado <code>.gitignore</code>  en donde incluiremos los archivos y directorios anteriores para excluirlos.</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#anadir-fichero-1txt","title":"A\u00f1adir fichero 1.txt","text":"<ol> <li> <p>A\u00f1adir fichero <code>1.txt</code> al repositorio local.</p> <ul> <li>Ahora creamos el archivo y lo a\u00f1adimos con git add</li> </ul> <pre><code>git add 1.txt\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#crear-el-tag-v01","title":"Crear el tag v0.1","text":"<ol> <li> <p>Crea un tag llamado v0.1</p> <pre><code>git tag V0.1\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#subir-el-tag-v01","title":"Subir el tag v0.1","text":"<ol> <li> <p>Subir los cambios al repositorio remoto.</p> <ul> <li>Para subir el tag v0.1 usaremos el siguiente comando</li> </ul> <pre><code>git push --tags\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#cuenta-de-github","title":"Cuenta de github","text":"<ol> <li> <p>Poner una foto en vuestro perfil de GitHub</p> <ul> <li>Para cambiar la foto de perfil deberemos ir a configuraci\u00f3n de github y hacer clic en cambiar foto</li> </ul> <p></p> <p>Y como podemos ver ya hemos cambiado la foto</p> <p></p> </li> <li> <p>Poner el doble factor de autentificaci\u00f3n en vuestra cuenta de Github</p> <ul> <li>Para a\u00f1adir el doble factor de autentificaci\u00f3n deberemos irnos al apartado de  contrase\u00f1as y autenticaci\u00f3n, en donde a\u00f1adiremos los m\u00e9todos de autenticaci\u00f3n de doble factor que queramos.</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#uso-social-de-github","title":"Uso social de github","text":"<ol> <li> <p>Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos, y s\u00edguelos.</p> <ul> <li>Buscamos los usuarios y le damos a seguir:</li> </ul> <p></p> <p></p> </li> <li> <p>Seguir los repositorios DEAW del resto de tus compa\u00f1eros.</p> <ul> <li>Dentro del repositorio, le daremos a watch all activity y ya estaremos  siguiendo el repositorio</li> </ul> <p></p> <p>Y para seguir al resto seria igual.</p> </li> <li> <p>A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.</p> <ul> <li>Para dar una estrella haremos clic en star y as\u00ed habremos dado una estrella</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#crear-una-tabla","title":"Crear una tabla","text":"<ol> <li> <p>Crear una tabla en el fichero README.md con la informaci\u00f3n de varios de tus compa\u00f1eros de clase:</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#colaboradores","title":"Colaboradores","text":"<ol> <li> <p>Poner a un compa\u00f1ero como colaborador en el repositorio DEAW</p> <ul> <li>Para a\u00f1adir un colaborador deberemos ir a <code>settings</code> dentro del repositorio. Una vez dentro iremos a colaboradores y haremos clic en a\u00f1adir personas</li> </ul> <p></p> <p></p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#crear-una-rama-v02","title":"Crear una rama v0.2","text":"<ol> <li> <p>Crear una rama <code>v0.2</code>.</p> <ul> <li>Para crear una rama nueva lo haremos con la siguiente rama</li> </ul> <pre><code>git branch v0.2\n</code></pre> </li> <li> <p>Posiciona tu carpeta de trabajo en esta rama.</p> <p>Atenci\u00f3n</p> <p>Antes de hacer un cambio de rama deberemos tener todos los cambios  confirmados en el repositorio.</p> <ul> <li>Para cambiar de rama deberemos usar el siguiente comando:</li> </ul> <pre><code>git checkout nombre_rama\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#anadir-fichero-2txt","title":"A\u00f1adir fichero 2.txt","text":"<ol> <li> <p>A\u00f1adir un fichero 2.txt en la rama v0.2</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#crear-rama-remota-v02","title":"Crear rama remota v0.2","text":"<ol> <li> <p>Subir los cambios al repositorio remoto</p> <ul> <li>Para subir la rama v0.2 usaremos el siguiente comando.</li> </ul> <pre><code>git push --set-upstream origin v0.2\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#merge-directo","title":"Merge directo","text":"<ol> <li>Posicionarse en la rama <code>main</code></li> <li> <p>Hacer un merge de la rama v0.2 en la rama master</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#merge-con-conflicto","title":"Merge con conflicto","text":"<ol> <li> <p>En la rama <code>master</code> poner <code>Hola</code> en el fichero <code>1.txt</code> y hacer commit     </p> </li> <li> <p>Posicionarse en la rama v0.2 y poner Adios en el fichero \"1.txt\" y hacer commit.     </p> </li> <li> <p>Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2</p> <ul> <li>Una vez que hemos hecho los cambios en cada rama hacemos un merge y nos indicara que hay un conflicto.</li> </ul> <p></p> <ul> <li>Para resolverlo nos iremos al archivo y nos quedaremos con los cambios de la rama que queramos    </li> </ul> <p></p> <p></p> <ul> <li>Una vez que hemos dejado el archivo con los cambios correctos y realizamos un commit</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#listado-de-ramas","title":"Listado de ramas","text":"<ol> <li> <p>Listar las ramas con merge y las ramas sin merge.</p> <ul> <li>Para listar las ramas con merge usaremos el siguiente comando:</li> </ul> <pre><code>git branch --merged\n</code></pre> <ul> <li>Para listar las ramas sin merge usaremos el siguiente comando:</li> </ul> <pre><code>git branch --no-merged\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#arreglar-conflicto","title":"Arreglar conflicto","text":"<pre><code>- El conflicto anterior ha sido arreglado en el 3 apartado de `Merge con conflicto`\n</code></pre>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#borrar-rama","title":"Borrar rama","text":"<ol> <li>Crear un tag v0.2</li> <li> <p>Borrar la rama v0.2</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#listado-de-cambios","title":"Listado de cambios","text":"<ol> <li> <p>Listar los distintos commits con sus ramas y sus tags.</p> <ul> <li>Para listar los cambios usaremos el comando:</li> </ul> <pre><code>git log --oneline --graph --decorate --all\n</code></pre> <ul> <li>Y nos mostrar\u00e1 algo as\u00ed</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-git-y-github-ii","title":"Ejercicios Git y Github II","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-de-creacion-y-actualizacion-de-repositorios","title":"Ejercicios de creaci\u00f3n y actualizaci\u00f3n de repositorios","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-1","title":"Ejercicio 1","text":"<ol> <li> <p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de salida.</p> <ul> <li>Para configurar el nombre de usuario usaremos el comando:</li> </ul> <pre><code>git config user.name nombre_usuario\n</code></pre> <ul> <li>Para configurar el email de usuario usaremos el comando:</li> </ul> <pre><code>git config user.email email_usuario\n</code></pre> <ul> <li>Y por \u00faltimo configuraremos el coloreado de salida.</li> </ul> <pre><code>git config color.ui auto\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-2","title":"Ejercicio 2","text":"<ol> <li> <p>Crear un repositorio nuevo con el nombre libro y mostrar su contenido</p> <ul> <li>Usaremos los siguientes comandos para crear el repositorio libro:</li> </ul> <pre><code>mkdir libro\ncd libro\ngit init\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-3","title":"Ejercicio 3","text":"<ol> <li> <p>Comprobar el estado del repositorio.</p> <ul> <li>Como hemos podido ver en la anterior captura el repositorio est\u00e1 vac\u00edo</li> </ul> </li> <li> <p>Crear un fichero <code>indice.txt</code> con el siguiente contenido:</p> <p></p> </li> <li> <p>Comprobar de nuevo el estado del repositorio.</p> <pre><code>git status\n</code></pre> <p></p> </li> <li> <p>A\u00f1adir el fichero a la zona de intercambio temporal.</p> <pre><code>git add indice.txt\n</code></pre> </li> <li> <p>Volver a comprobar una vez m\u00e1s el estado del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-4","title":"Ejercicio 4","text":"<ol> <li> <p>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</p> <pre><code>git commit -m \"A\u00f1adido \u00edndice del libro\"\n</code></pre> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-5","title":"Ejercicio 5","text":"<ol> <li> <p>Cambiar el fichero <code>indice.txt</code> para que contenga lo siguiente:</p> </li> <li> <p>Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio.</p> <pre><code>git diff indice.txt\n</code></pre> <p></p> </li> <li> <p>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\"</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-6","title":"Ejercicio 6","text":"<ol> <li> <p>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior.</p> <pre><code>git diff HEAD~1 HEAD\n</code></pre> <p></p> </li> <li> <p>Cambiar el mensaje del \u00faltimo commit por \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice\"</p> <pre><code>git commit --amend -m \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\"\n</code></pre> <p></p> </li> <li> <p>Volver a mostrar los \u00faltimos cambios del repositorio.</p> <ul> <li>Esto lo haremos con el mismo comando que en el primer apartado</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-de-manejo-del-historial-de-cambios","title":"Ejercicios de manejo del historial de cambios","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-1_1","title":"Ejercicio 1","text":"<ol> <li> <p>Mostrar el historial de cambios del repositorio.</p> <ul> <li>Para mostrar el historial de cambios del repositorio lo haremos con el siguiente comando</li> </ul> <pre><code>git log\n</code></pre> <p></p> </li> <li> <p>Crear la carpeta cap\u00edtulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto.</p> <p><code>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</code></p> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p></p> </li> <li> <p>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 1.\" Volver a mostrar de cambios del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-2_1","title":"Ejercicio 2","text":"<ol> <li> <p>Crear el fichero <code>capitulo2.txt</code> en la carpeta cap\u00edtulos con el siguiente texto.</p> <p><code>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</code></p> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p></p> </li> <li> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d</p> <p></p> </li> <li> <p>Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.</p> <ul> <li>Para mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores lo haremos con el siguiente comando:</li> </ul> <pre><code>git diff HEAD~2 HEAD\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-3_1","title":"Ejercicio 3","text":"<ol> <li> <p>Crear el fichero capitulo3.txt en la carpeta cap\u00edtulos con el siguiente texto.</p> <p><code>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas.</code></p> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p></p> </li> <li> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d</p> <p></p> </li> <li> <p>Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p> <ul> <li>Para hacer esto necesitamos primero tenemos que saber el ID del primer commit:</li> </ul> <pre><code>git log\n</code></pre> <p></p> <ul> <li> <p>Y el ID que vemos a la izquierda es el ID de cada commit en este caso el n\u00famero 1 es <code>f09939b</code>.</p> </li> <li> <p>Ahora hacemos la diferencia con este comando:</p> </li> </ul> <pre><code>git diff f09939b HEAD\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-4_1","title":"Ejercicio 4","text":"<ol> <li> <p>A\u00f1adir al final del fichero <code>indice.txt</code> la siguiente l\u00ednea:</p> <p><code>Cap\u00edtulo 5: Conceptos avanzados</code></p> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p></p> </li> <li> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d.</p> <p></p> </li> <li> <p>Mostrar qui\u00e9n ha hecho cambios sobre el fichero <code>indice.txt</code>.</p> <ul> <li>Para mostrar qui\u00e9n ha hecho los cambios usaremos</li> </ul> <pre><code>git blame indice.txt\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-de-deshacer-cambios","title":"Ejercicios de deshacer cambios","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-1_2","title":"Ejercicio 1","text":"<ol> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p></p> </li> <li> <p>Comprobar el estado del repositorio.</p> <p></p> </li> <li> <p>Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero.</p> <ul> <li>Para deshacer los cambios usaremos el siguiente comando:</li> </ul> <pre><code>git restore indice.txt\n</code></pre> <p></p> </li> <li> <p>Volver a comprobar el estado del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-2_2","title":"Ejercicio 2","text":"<ol> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Comprobar de nuevo el estado del repositorio.</p> <p></p> </li> <li> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <ul> <li>Para quitar los cambios de la zona de intercambio, pero mantenerlos en el directorio de trabajo usaremos el siguiente comando:</li> </ul> <p></p> </li> <li> <p>Comprobar de nuevo el estado del repositorio.</p> <p></p> </li> <li> <p>Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero.</p> <pre><code>git restore indice.txt\n</code></pre> </li> <li> <p>Volver a comprobar el estado del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-3_2","title":"Ejercicio 3","text":"<ol> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p></p> </li> <li> <p>Eliminar el fichero <code>capitulos/capitulo3.txt</code>.</p> </li> <li> <p>A\u00f1adir un fichero nuevo <code>capitulos/capitulo4.txt</code> vac\u00edo.</p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Comprobar de nuevo el estado del repositorio.</p> <p></p> </li> <li> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <ul> <li>Para hacer esto usaremos los siguientes comandos:</li> </ul> <pre><code>git restore --staged indice.txt\ngit restore --staged capitulos/capitulo4.txt\ngit restore --staged capitulos/capitulo3.txt\n</code></pre> <p></p> </li> <li> <p>Comprobar de nuevo el estado del repositorio.</p> </li> <li> <p>Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio.</p> <ul> <li>Aqu\u00ed usaremos el mismo comando que en el apartado 6 pero sin la opci\u00f3n <code>--staged</code>. Y para deshacer los cambios del capitulo4 usaremos este comando.</li> </ul> <pre><code>rm capitulos/capitulo4.txt\n</code></pre> <ul> <li>Usamos rm en vez de git rm o restore, porque este archivo no est\u00e1 guardado en ning\u00fan commit de git.</li> </ul> </li> <li> <p>Volver a comprobar el estado del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-4_2","title":"Ejercicio 4","text":"<ol> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p></p> </li> <li> <p>Eliminar el fichero <code>capitulos/capitulo3.txt</code>.</p> <pre><code>rm capitulos/capitulo3.txt\n</code></pre> <p></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d</p> <p></p> </li> <li> <p>Comprobar el historial del repositorio.</p> <p></p> </li> <li> <p>Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal.</p> <ul> <li>Para mantener los cambios y borrar el commit, deberemos usar el siguiente comando:</li> </ul> <pre><code>git reset --soft HEAD~1\n</code></pre> <ul> <li>El par\u00e1metro soft nos permite mantener los cambios y solo deshace el commit.</li> </ul> <p></p> </li> <li> <p>Comprobar el historial y el estado del repositorio.</p> <p></p> </li> <li> <p>Volver a hacer el commit con el mismo mensaje de antes.</p> <p></p> </li> <li> <p>Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio.</p> <ul> <li>Ahora usaremos el par\u00e1metro <code>--hard</code>en vez de <code>--soft</code> para que el directorio vuelve a estar como el \u00faltimo commit antes de borrado accidental.</li> </ul> <pre><code>git reset --hard HEAD~1\n</code></pre> <p></p> </li> <li> <p>Comprobar de nuevo el historial y el estado del repositorio.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-de-gestion-de-ramas","title":"Ejercicios de gesti\u00f3n de ramas","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-1_3","title":"Ejercicio 1","text":"<ol> <li> <p>Crear una nueva rama bibliograf\u00eda y mostrar las ramas del repositorio.</p> <ul> <li>Para crear una usaremos el comando <code>git branch</code> como se muestra abajo</li> </ul> <pre><code>git branch bibliografia\n</code></pre> <ul> <li>Y para mostrar las ramas actuales usaremos:</li> </ul> <pre><code>git branch\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-2_3","title":"Ejercicio 2","text":"<ol> <li> <p>Crear el fichero <code>capitulos/capitulo4.txt</code> y a\u00f1adir el texto siguiente</p> <p><code>En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto.</code></p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p></p> </li> <li> <p>Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d</p> </li> <li> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <ul> <li>Para que en log salgan todas las ramas deberemos usar el par\u00e1metro <code>--all</code>.</li> </ul> <pre><code>git log --all\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-3_3","title":"Ejercicio 3","text":"<ol> <li> <p>Cambiar a la rama bibliograf\u00eda.</p> <ul> <li>Para cambiar a la rama bibliograf\u00eda lo haremos con <code>git checkout</code></li> </ul> <p>Aviso</p> <p>Para cambiar de rama deberemos tener todos los cambios confirmados en el repositorio, si no podr\u00edan ocurrir errores.</p> <pre><code>git checkout bibliografia\n</code></pre> </li> <li> <p>Crear el fichero <code>bibliografia.txt</code> y a\u00f1adir la siguiente referencia</p> </li> </ol> <p><code>Chacon, S. and Straub, B. Pro Git. Apress.</code></p> <ol> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d</p> <p></p> </li> <li> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-4_3","title":"Ejercicio 4","text":"<ol> <li> <p>Fusionar la rama bibliograf\u00eda con la rama master.</p> <ul> <li> <p>Para fusionar la rama bibliograf\u00eda con la rama master primero debemos de situarnos en la rama master y luego hacer un <code>merge</code> </p> </li> <li> <p>Para cambiarnos de rama usaremos <code>git checkout</code> como anteriormente</p> </li> </ul> <p></p> </li> <li> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p> </li> <li> <p>Eliminar la rama bibliograf\u00eda.</p> <ul> <li>Para borrar la rama bibliograf\u00eda usaremos el siguiente comando</li> </ul> <pre><code>git branch -d bibliografia\n</code></pre> <p></p> </li> <li> <p>Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-5_1","title":"Ejercicio 5","text":"<ol> <li> <p>Crear la rama bibliograf\u00eda.</p> </li> <li> <p>Cambiar a la rama bibliograf\u00eda.</p> </li> <li> <p>Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> <pre><code>Scott Chacon and Ben Straub. Pro Git. Apress.\nRyan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p></p> </li> <li> <p>Cambiar a la rama master.</p> </li> <li> <p>Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> </li> </ol> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\n</code></pre> <ol> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p></p> </li> <li> <p>Fusionar la rama bibliograf\u00eda con la rama master.</p> </li> <li> <p>Resolver el conflicto dejando el fichero <code>bibliografia.txt</code> con las referencias:</p> </li> </ol> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\nHodson, R. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> <ol> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d</p> <p></p> </li> <li> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicios-de-repositorios-remotos","title":"Ejercicios de repositorios remotos","text":""},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-1_4","title":"Ejercicio 1","text":"<ol> <li> <p>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git.</p> <p></p> </li> <li> <p>A\u00f1adirlo al repositorio local del libro.</p> </li> <li> <p>Mostrar todos los repositorios remotos configurados</p> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-2_4","title":"Ejercicio 2","text":"<ol> <li> <p>A\u00f1adir los cambios del repositorio local al repositorio remoto de Github.</p> <ul> <li>Para submit los cambios a git deberemos usar el siguiente comando:</li> </ul> <pre><code>git push -u origin master\n</code></pre> </li> <li> <p>Acceder a Github y comprobar que se han subido los cambios mostrando el historial de versiones.</p> <ul> <li>Y como podemos ver, se han subido los cambios</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-3_4","title":"Ejercicio 3","text":"<ol> <li> <p>Colaborar en el repositorio remoto libro-git de otro usuario.</p> </li> <li> <p>Clonar su repositorio libro-git.</p> <ul> <li>Para clonar un repositorio usaremos <code>git clone</code></li> </ul> <p></p> </li> <li> <p>A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico.</p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d</p> <p></p> </li> <li> <p>Subir los cambios al repositorio remoto.</p> <ul> <li>Esta vez, como la rama en el remoto ya est\u00e1 creada obviaremos el par\u00e1metro <code>-u</code> en <code>git push</code></li> </ul> <pre><code>git push\n</code></pre> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%205/Practica5.1/#ejercicio-4_4","title":"Ejercicio 4","text":"<ol> <li> <p>Hacer una bifurcaci\u00f3n del repositorio remoto <code>asalber/libro-git</code> en GitHub.</p> <ul> <li>Para lograr esto nos iremos al repositorio en github y haremos clic sobre Fork</li> </ul> <p></p> <p></p> </li> <li> <p>Clonar el repositorio creado en la cuenta de GitHub del usuario.</p> <pre><code>git clone https://github.com/Alexcorox/libro-git.git\n</code></pre> </li> <li> <p>Crear una nueva rama autor\u00eda y activarla.</p> <p></p> </li> <li> <p>A\u00f1adir el nombre del usuario y su correo al fichero autores.txt.</p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d</p> </li> <li> <p>Subir los cambios de la rama autor\u00eda al repositorio remoto en GitHub.</p> <p></p> </li> <li> <p>Hacer un Pull Request de los cambios en la rama autor\u00eda. </p> <ul> <li>Para crear un pull request deberemos ir al apartado pull request dentro de github y haremos clic en <code>create a pull request</code></li> </ul> <p></p> <ul> <li>Seleccionamos las ramas que queremos que compare para hacer el pull request. Y como podemos observar detecta las diferencias que hay entre ellas.</li> </ul> <p></p> <ul> <li>Le asignamos un nombre y le damos a <code>create pull request</code>.</li> </ul> <p></p> <ul> <li>Una vez que hayamos completado estos pasos, habremos creado nuestro pull request</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.1/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.1/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica vamos a Dockerizar una aplicaci\u00f3n de Node.js que usa una BBDD PostgreSql para gestionar personas en un libro de direcciones.</p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.1/#instalacion","title":"Instalaci\u00f3n","text":"<p>Primero necesitaremos instalar Docker en nuestra m\u00e1quina para esto seguiremos los siguientes pasos:</p> <ol> <li> <p>Actualizar nuestro equipo:     <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> </li> <li> <p>Instalar dependencias necesarias para que Docker pueda ejecutarse:</p> <pre><code>sudo apt install apt-transport-https ca-certificates gnupg2 software-properties-common\n</code></pre> </li> <li> <p>A\u00f1adir la clave GPG del repositorio Docker:</p> <pre><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n</code></pre> </li> <li> <p>A\u00f1adir el repositorio Docker</p> <p><code>` sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"</code></p> </li> <li> <p>Actualizar la lista de paquetes</p> <pre><code>sudo apt update\n</code></pre> </li> <li> <p>Instalar Docker</p> <pre><code>sudo apt install docker-ce\n</code></pre> </li> <li> <p>Comprobar que docker esta instalado:</p> <pre><code>docker -v\n</code></pre> <ul> <li>Y como podemos ver en la imagen de abajo tenemos la \u00faltima versi\u00f3n de docker instalada en nuestro equipo</li> </ul> <p></p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.1/#despliegue-con-docker","title":"Despliegue con Docker","text":"<p>Una vez que hayamos completado la instalaci\u00f3n de docker en nuestra m\u00e1quina pasaremos a desplegar la aplicaci\u00f3n de node.js</p> <p>Para esto necesitaremos clonar el siguiente repositorio con la aplicaci\u00f3n.</p> <pre><code>git clone https://github.com/raul-profesor/DAW_practica_6.1_2024.git\n</code></pre> <p></p> <p>Como podemos observar si hacemos un listado de los archivos de la aplicaci\u00f3n ya viene con el archivo <code>Dockerfile</code></p> <p></p> <p>Aunque este viene incompleto, por lo que tendremos que rellenarlo para que funcione</p> <p></p> <pre><code>_____ node:18.16.0-alpine3.17\n\n_____  mkdir -p /opt/app\n\n_____ /opt/app\n\n_____ src/package.json src/package-lock.json .\n\n_____ npm install\n\n_____ src/ .\n\n_____ 3000\n\n_____ [\"npm\", \"run\", \"start:dev\"]\n</code></pre> <p>Y una vez modificado y corregido quedar\u00eda as\u00ed:</p> <pre><code>FROM node:18.16.0-alpine3.17\nRUN  mkdir -p /opt/app \nWORKDIR /opt/app\nCOPY src/package.json src/package-lock.json . \nRUN  npm install\nCOPY  src/ .\nEXPOSE 3000\nCMD [ \"npm\", \"start\"]\n</code></pre> <p>Ahora tendremos que hacer la build de la imagen de Docker. Tambi\u00e9n le indicaremos que se llama librodirecciones y que haga la build usando el contexto del directorio actual, esto para que use el dockerfile que acabamos de editar.</p> <pre><code>docker build -t librodirecciones .\n</code></pre> <p></p> <p>Y como podemos observar docker ha ido ejecutando cada uno de los pasos que hemos establecido anteriormente en el Dockerfile para montar la imagen de nuestra app.</p> <p>A continuaci\u00f3n iniciaremos el contenedor con nuestra aplicaci\u00f3n. Pero con ciertos par\u00e1metros para que funcione correctamente, en este caso usaremos la opci\u00f3n <code>-p</code>, que indica que puerto de nuestra m\u00e1quina tiene docker que escuchar para redirigirlo al puerto del contenedor.</p> <pre><code>docker run -p 3000:3000 -d librodirecciones\n</code></pre> <p></p> <p>Tras esto comprobaremos que se puede acceder a la app desde el navegador de nuestra app.</p> <p></p> <p>Aunque si intent\u00e1ramos hacer un uso de la misma esta fallar\u00e1, ya que no logra conectarse con la base de datos.</p> <p>A pesar de que todos los contenedores corren en la misma m\u00e1quina, cada uno es considerado un host diferente y por eso la aplicaci\u00f3n falla al conectar.</p> <p>Aqu\u00ed es donde entra Docker compose el cual nos permitir\u00e1 administrar los contenedores.</p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.1/#docker-compose","title":"Docker Compose","text":"<p>Docker compose nos permite:</p> <ul> <li>Iniciar y detener m\u00faltiples contenedores en secuencia.</li> <li>Conectar contenedores utilizando una red virtual.</li> <li>Manejar la persistencia de datos usando Docker Volumes.</li> <li>Establecer variables de entorno.</li> <li>Construir o descargar im\u00e1genes de contenedores seg\u00fan sea necesario.</li> </ul> <p>Docker compose usa un archivo <code>yaml</code> para escribir la configuraci\u00f3n de la aplicaci\u00f3n.</p> <p>En este caso nosotros usaremos este archivo <code>yaml</code> para el correcto funcionamiento de nuestra aplicaci\u00f3n.</p> <pre><code>version: \"3.9\"\nservices:\n  postgres:\n    image: postgres:latest\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports: \n      - '5432:5432'\n    volumes:\n      - addressbook-db:/var/lib/postgresql/data\n\n  addressbook:\n    build:\n      context: .\n    environment:\n      DB_SCHEMA: postgres\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      DB_HOST: postgres\n    depends_on:\n      - postgres\n    ports:\n      - '3000:3000'\n\nvolumes:\n  addressbook-db:\n</code></pre> <p>Atenci\u00f3n</p> <p>Es aconsejable que antes de seguir paremos el contenedor del apartado anterior, pues vamos a usar el mismo puerto <code>3000</code> para docker compose</p> <pre><code>docker stop nombre_contenedor\n</code></pre> <p></p> <p>Ahora, tendremos que ejecutar los siguientes comandos:</p> <pre><code>docker compose run addressbook npm run migrate\n</code></pre> <p>Nota</p> <p>El comando <code>docker compose run</code> nos permite ejecutar comandos sobre un servicio de docker compose</p> <p>Este comando crear\u00e1 las tablas necesarias en la base de datos.</p> <p></p> <p>Ahora vamos a construir los contenedores a partir de las im\u00e1genes:</p> <pre><code>docker compose up --build -d\n</code></pre> <p></p> <p>Y como se puede observar el contenedor ya est\u00e1 funcionando y se puede acceder a \u00e9l.</p> <p>Tarea</p> <p>Probad que la aplicaci\u00f3n junto con la BBDD funciona correctamente. El funcionamiento de la API es:</p> <ul> <li><code>GET /persons/all</code> muestra todas las personas en el libro de direcciones</li> <li><code>GET /persons/1</code> muestra la persona con el id 1</li> <li><code>PUT /persons/</code> a\u00f1ade una persona al libro de direcciones</li> <li><code>DELETE /persons/1</code> elimina a la persona con el id 1</li> </ul> <p>Ejemplos: <pre><code>curl -X PUT http://IP_APLICACION:3000/persons -H 'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Ra\u00fal\", \"lastName\": \"Profesor\"}'\n\ncurl -X GET http://localhost:3000/persons -H 'Content-Type: application/json'\n</code></pre></p> <p>Para hacer esta tarea usar\u00e9 la herramienta postman para hacer uso de la API</p> <ol> <li> <p>Funci\u00f3n put:</p> <p></p> <p>Como podemos ver, despu\u00e9s de hacer el put, la aplicaci\u00f3n nos devuelve los datos que hemos introducido en la base de datos junto al c\u00f3digo 200 indicando que se han insertado correctamente.</p> </li> <li> <p>Funci\u00f3n GET /persons/1</p> <p></p> <p>En este caso la aplicaci\u00f3n nos devuelve la informaci\u00f3n de la persona con ID 1</p> </li> <li> <p>Funci\u00f3n GET /persons/all</p> <p></p> <p>Aqu\u00ed la aplicaci\u00f3n nos devuelve todas las personas que hay en la base de datos.</p> </li> <li> <p>Y por \u00faltimo DELETE /persons/1</p> <p></p> <p>Esta petici\u00f3n como su nombre indica borrar a la persona con ID 1</p> <p></p> <p>Y si volvemos a intentar acceder a la persona 1 podemos ver que devuelve null, indicando que se ha borrado exitosamente. </p> </li> </ol>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/","title":"Pr\u00e1ctica 6.2 - Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y docker-compose","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#que-es-docker-compose","title":"\u00bfQue es docker-compose?","text":"<p>Docker Compose es una herramienta vers\u00e1til que te permite definir y gestionar aplicaciones multi-contenedor de forma sencilla. Con Docker Compose, puedes describir la configuraci\u00f3n de tu entorno de desarrollo en un archivo YAML, especificando los servicios, vol\u00famenes y redes necesarios para tu aplicaci\u00f3n.</p> <p>Para usarlo deberemos seguir los siguientes pasos:</p> <ul> <li> <p>Definir el entorno de nuestra aplicaci\u00f3n con un Dockerfile para que pueda usarse en cualquier lugar.</p> </li> <li> <p>Definir los servicios que componen la aplicacion en <code>docker-compose.yml</code>.</p> </li> <li> <p>Ejecutar <code>docker compose up -d</code> para que Docker lanza la aplicaci\u00f3n.</p> </li> </ul>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#instalacion-de-docker-compose","title":"Instalaci\u00f3n de docker-compose","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#proceso-de-dockerizacion-de-nginxphpmysl","title":"Proceso de dockerizaci\u00f3n de Nginx+PHP+Mysl","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#1-estrucutra-de-directorios","title":"1. Estrucutra de directorios","text":"<p>En esta practica vamos a seguir la siguiente estructura de directorios para que todas las rutas que usemos funcionen: </p> <pre><code>/usuario/Documentos/practica6-2/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 nginx\n\u2502   \u251c\u2500\u2500 default.conf\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 php\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 html\n        \u2514\u2500\u2500 index.php\n</code></pre> <p>Por lo tanto vamos a ir creado estos directorios y archivos y posteriormente los iremos rellenando.</p> <pre><code>cd ~/Documentos\nmkdir practica6-2\ncd practica6-2\ntouch docker-compose.yml\nmkdir nginx\ntouch nginx/default.conf\ntouch nginx/Dockerfile\nmkdir php\ntouch php/Dockerfile\nmkdir www/html -p\ntouch www/html/index.php\n</code></pre> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#2-creacion-de-un-contenedor-nginx","title":"2. Creaci\u00f3n de un contenedor Nginx","text":"<p>Para empezar, necistamos crear y correr un contenedor Nginx para que nuestra aplicaci\u00f3n PHP se pueda mostrar en los navegadores.</p> <p>Dentro de la carpeta <code>/usuario/home/practica6-2</code> debemos modificar el archiv <code>docker-compose.yml</code></p> <p>Y editamos este archivo e introducimos las siguientes lineas:</p> <pre><code>services:\n    nginx:\n    image: nginx:latest\n    container_name: nginx-container\n    ports:\n        - 80:80\n</code></pre> <p></p> <p>Una vez modificado este archivo, se encargar\u00e1 de descargarse \u00f1a \u00faltima versi\u00f3n de la imagen de Nginx, crear un contenedor y publicar en el puerto 80 del contenedor que tambi\u00e9n usara el 80 en la maquina anfitriona (80:80).</p> <p>Iniciamos esto con:</p> <pre><code>docker compose up -d\n</code></pre> <p></p> <p>Para comprobar que el contenedor est\u00e1 corriendo, deberemos ejecutar el siguiente comando:</p> <pre><code>docker ps\n</code></pre> <p>Y deberia de salirnos algo as\u00ed</p> <p></p> <p>Adem\u00e1s, si intentamos conectarnos desde el navegador de nuestra maquina anfitriona y accedemos a la direcci\u00f3n ip de la m\u00e1quina donde esta alojado el contenedor deberia de salir p\u00e1gina de bienvenida de nginx.</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#3-creacion-del-contendor-php","title":"3. Creaci\u00f3n del contendor PHP","text":"<p>Como ya hemos creado previamente los archivos deberemos irnos a <code>www/html/index.php</code></p> <p>Y dentro de <code>index.php</code> a\u00f1adiremos el siguiente c\u00f3digo: </p> <p></p> <p>Tras esto procederemos a rellenar el archivo de configuraci\u00f3n de nginx ubicado en <code>./nginx/default.conf</code>. Donde colocaremos la siguiente configuraci\u00f3n.</p> <pre><code>server {\n\n     listen 80 default_server;\n     root /var/www/html;\n     index index.html index.php;\n\n     charset utf-8;\n\n     location / {\n      try_files $uri $uri/ /index.php?$query_string;\n     }\n\n     location = /favicon.ico { access_log off; log_not_found off; }\n     location = /robots.txt { access_log off; log_not_found off; }\n\n     access_log off;\n     error_log /var/log/nginx/error.log error;\n\n     sendfile off;\n\n     client_max_body_size 100m;\n\n     location ~ .php$ {\n      fastcgi_split_path_info ^(.+.php)(/.+)$;\n      fastcgi_pass php:9000;\n      fastcgi_index index.php;\n      include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_intercept_errors off;\n      fastcgi_buffer_size 16k;\n      fastcgi_buffers 4 16k;\n    }\n\n     location ~ /.ht {\n      deny all;\n     }\n    }\n</code></pre> <p></p> <p>Por \u00faltimo modificaremos el archivo <code>Dockerfile</code> dentro de la carpeta nginx para indicarle a docker que tiene que copiar esta configuraci\u00f3n dentro del contenedor.</p> <p>Contenido:</p> <pre><code>FROM nginx:latest\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n</code></pre> <p></p> <p>Ahora editaremos nuestro archivo <code>docker-compose.yml</code> a\u00f1adiendo el nuevo servicio de php y modificando el de nginx.</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes:\n      - ./www/html/:/var/www/html/\n\n  php:\n    image: php:7.0-fpm\n    container_name: php-container\n    expose:\n      - 9000\n    volumes:\n      - ./www/html/:/var/www/html/\n</code></pre> <p></p> <p>Tras estos cambios, procederemos a lanzar los contenedores con:</p> <pre><code>docker compose up -d\n</code></pre> <p>Atenci\u00f3n</p> <p>Recordad ejecutar <code>docker compose down</code> si no lo habeis hecho antes, para iniciar la nueva configuraci\u00f3n.</p> <p></p> <p>Y una vez que los contenedores esten levantados al hacer:</p> <pre><code>docker ps\n</code></pre> <p>Se dberia ver algo as\u00ed:</p> <p></p> <p>Y si ahora volvemos a acceder a la ip del a m\u00e1quina virtual desde el navegador, veremos la p\u00e1gina que hemos creado en index.php</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#4-creacion-de-un-contenedor-para-datos","title":"4. Creaci\u00f3n de un contenedor para datos","text":"<p>Como habe\u00eds podido observar, hemos montado el directorio <code>www/html</code> en ambos contenedores, el de nginx y el de php. Sin embargo, esta no es una forma adecuada de hacerlo. En este paso crearemos un contenedor independiente el cual ser\u00e1 el encargado de contener los datos y lo enlzamos con el resto de contenedores.</p> <p>Para logra esto deberemos modificar el archivo <code>docker-compose.yml</code>:</p> <pre><code>services:\n    nginx:\n        build: ./nginx/\n        container_name: nginx-container\n        ports:\n            - 80:80\n        links:\n            - php\n        volumes_from:\n            - app-data\n\n    php:\n        image: php:7.0-fpm\n        container_name: php-container\n        expose:\n            - 9000\n        volumes_from:\n            - app-data\n\n    app-data:\n        image: php:7.0-fpm\n        container_name: app-data-container\n        volumes:\n            - ./www/html/:/var/www/html/\n        command: \"true\"\n````\n\nTras hacer este modificaci\u00f3n ejecutaremos el comando:\n\n```dockerfile\ndocker-compose up -d\n</code></pre> <p>Y volvemos a verificar que est\u00e1n corriendo todos los contenedores.</p> <pre><code>docker ps -a\n</code></pre> <p>Deberiamos ver algo parecido a esto:</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#5-creacion-de-un-contendor-mysql","title":"5. Creaci\u00f3n de un contendor Mysql","text":"<p>En este apartado vamos a crear un contenedor con una base de datos Mysql y lo enlazaremos con el resto de contenedores.</p> <p>Primero deberemos modificar el dockerfile de la carpeta php para descargar e instalar una extensi\u00f3n para Mysql.</p> <p>Contenido del Dockerfile:</p> <pre><code>FROM php:7.0-fpm\nRUN docker-php-ext-install pdo_mysql\n</code></pre> <p></p> <p>Y ahora deberemos modificar otra vez el archivo <code>docker-compose.yml</code> para a\u00f1adir el nuevo servicio de Mysql</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes_from:\n      - app-data\n  php:\n    build: ./php/\n    container_name: php-container\n    expose:\n      - 9000\n    links:\n      - mysql\n    volumes_from:\n      - app-data\n\n  app-data:\n    image: php:7.0-fpm\n    container_name: app-data-container\n    volumes:\n      - ./www/html/:/var/www/html/\n    command: \"true\"\n\n  mysql:\n    image: mysql:5.7\n    container_name: mysql-container\n    volumes_from:\n      - mysql-data\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: password\n\n  mysql-data:\n    image: mysql:5.7\n    container_name: mysql-data-container\n    volumes:\n      - /var/lib/mysql\n    command: \"true\"\n</code></pre> <p></p> <p>Tras realizar esta modificaci\u00f3n debemos modificar el archivo <code>index.php</code> y hacer los siguientes cambios:</p> <pre><code>     &lt;!DOCTYPE html&gt;\n     &lt;head&gt;\n      &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n     &lt;/head&gt;\n\n     &lt;body&gt;\n      &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n      &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n      &lt;?\n       $database =\"mydb\";\n       $user = \"myuser\";\n       $password = \"password\";\n       $host = \"mysql\";\n\n       $connection = new PDO(\"mysql:host={$host};dbname={$database};charset=utf8\", $user, $password);\n       $query = $connection-&gt;query(\"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'\");\n       $tables = $query-&gt;fetchAll(PDO::FETCH_COLUMN);\n\n        if (empty($tables)) {\n          echo \"&lt;p&gt;No hay tablas en la base de datos \\\"{$database}\\\".&lt;/p&gt;\";\n        } else {\n          echo \"&lt;p&gt;La base de datos \\\"{$database}\\\" tiene las siguientes tablas:&lt;/p&gt;\";\n          echo \"&lt;ul&gt;\";\n            foreach ($tables as $table) {\n              echo \"&lt;li&gt;{$table}&lt;/li&gt;\";\n            }\n          echo \"&lt;/ul&gt;\";\n        }\n        ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>A continuaci\u00f3n volvemos a lanzar los contenedores y verificamos que est\u00e1n ejecutandose:</p> <pre><code>docker compose up -d\ndocker ps -a\n</code></pre> <p></p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.2/#6-verificacion-de-conexion-a-la-base-de-datos","title":"6. Verificaci\u00f3n de conexi\u00f3n a la base de datos","text":"<p>Si ahora intentasemos acceder a la direcci\u00f3n de nuesta maquina, deberiamos de obtener la siguiente pantalla:</p> <p></p> <p>Como se puede ver la aplicaci\u00f3n nos indicar que no hay tablas en la base de datos mydb esto se debe a que al copiar el archivo php no hemos configurado el nombre de usuario ni la contrase\u00f1a. Por lo tanto deberemos cambiar las siguientes l\u00edneas:</p> <pre><code>$user = \"root\";\n$password = \"secret\";\n</code></pre> <p>Una vez modificado y guardado si referescamos la p\u00e1gina deberia de salirnos las tablas indicando que la aplicaci\u00f3n esta funcionando correctamente.</p> <p></p> <p>Habiendo completado asi, el despliegue de nuestra aplicaci\u00f3n php, con mysql y nginx.</p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.3/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"Practicas-Despliegues/Unidad%206/Practica6.3/#despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openladp","title":"Despliegue con Docker de Nginx + demonio de autenticaci\u00f3n LDAP + OpenLADP","text":"<p>Para esta pr\u00e1ctica crearemos un nuevo directorio en la carpeta <code>Documentos</code> la cual contendr\u00e1 un <code>index.html</code></p> <pre><code>mkdir practica6.3\n</code></pre> <p>Tras esto procederemos a crear el archivo <code>index.html</code> con el siguiente contenido</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola Mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Una vez creado el archivo, procederemos a crear un nuevo directorio llamado <code>conf</code> en donde guardaremos la configuraci\u00f3n de Nginx.</p> <pre><code>mkdir conf\n</code></pre> <p>Una vez creado el directorio, crearemos el siguiente archivo <code>ladp_nginx.conf</code> e  introduciremos la siguiente configuraci\u00f3n.</p> <pre><code>server {\n  listen 8080;\n\n  location = / {\n      auth_request /auth-proxy;\n  }\n\n  location = /auth-proxy {\n      internal;\n\n      proxy_pass http://nginx-ldap:8888;\n\n      # URL y puerto para conectarse al servidor LDAP\n      proxy_set_header X-Ldap-URL \"ldap://openldap:1389\";\n\n      # Base DN\n      proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\";\n\n      # Bind DN\n      proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\";\n\n      # Bind password\n      proxy_set_header X-Ldap-BindPass \"adminpassword\";\n  }\n}\n</code></pre> <p></p> <p>Basicamente en esta configuraci\u00f3n le decimos a Nginx lo siguiente:</p> <ul> <li>Que escuche el puerto 8080 para las peticiones HTTP.</li> <li>Que cuando se acceda al sitio web, se solicite autorizaci\u00f3n en el directorio del sitio web.</li> <li>Se crea un nuevo location para ese directorio y que es donde se realizar\u00e1 la configuraci\u00f3n de c\u00f3mo conectarnos a nuestro openldap.</li> <li>Se indica la URL de nuestro openldap.</li> <li>El DN, base sobre el que se realizar\u00e1n las b\u00fasquedas en openldap.</li> <li>El usuario y contrase\u00f1a con el que nos conectaremos al openldap. </li> </ul> <p>Una vez explicado esto, crearemos el archivo <code>docker-compose.yml</code> con la siguiente  configuraci\u00f3n:</p> <pre><code>services:\n  nginx-ldap:\n\n\n    image: bitnami/nginx-ldap-auth-daemon\n\n\n    ports: \n\n\n      - 8888:8888\n  nginx:\n\n\n    image: bitnami/nginx\n    ports: \n     - 8080:8080\n    volumes:\n\n\n     - ./app:/app\n     - ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf\n  openldap: \n\n\n  image: bitnami/openldap\n  ports:\n    - '1389:1389'    \n  environment:\n\n\n    - LDAP_ADMIN_USERNAME=admin\n    - LDAP_ADMIN_PASSWORD=adminpassword\n    - LDAP_USERS=customuser\n    - LDAP_PASSWORDS=custompassword\n</code></pre> <p></p> <p>Una vez creado, solo nos queda ejecutar el comando para arrancar los servicios:</p> <pre><code>docker compose up -d\n</code></pre> <p>Y como podemos ver docker ya empieza a descargar las imagenes</p> <p></p>"},{"location":"Practicas-Despliegues/Unidad%206/Practica6.3/#despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<ul> <li>Creamos un directorio que se llame <code>Practica 6.3 - PHP</code></li> </ul> <pre><code>mkdir 6.3\n</code></pre> <ul> <li>Ahora creamos, <code>index.php</code> dentro del directorio que hemos creado anteriormente.</li> </ul> <pre><code>  &lt;?php\n  echo 'Well, hello LDAP authenticated user!';\n</code></pre> <ul> <li>Lo siguiente que deberemos hacer ser\u00e1 crear otro directorio llamado <code>Docker</code> y dentro \u00e9l, un archivo Dockerfile.</li> </ul> <pre><code># ./Docker/Dockerfile --&gt; directorio donde se encuentra este archivo\n\n# Imagen base sobre la que vamos a trabajar\nFROM php:7-apache\n\n# Activamos el m\u00f3dulo LDAP de Apache ejecutando el siguiente comando\nRUN a2enmod authnz_ldap\n\n# A\u00f1adimos las reglas/configuraci\u00f3n de LDAP al directorio conf-enabled de Apache\n# (crearemos este archivo en el siguiente paso)\nCOPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/\n\n# A\u00f1adimos ayuda de depuraci\u00f3n (debugging) en la configuraci\u00f3n de apache\n# En caso de necesitarlo, lo descomentamos para ejecutar el siguiente comando\n# RUN echo \"LogLevel debug\" &gt;&gt; /etc/apache2/apache2.conf\n\n# Establecemos el directorio de trabajo adecuado\nWORKDIR /var/www/html/demo\n\n# Configuramos Apache para usar la configuraci\u00f3n LDAP definida arriba, la copiamos de nuestro ordenador al contenedor\nCOPY Docker/.htaccess ./.htaccess\n\n# Copiamos los archivos del proyecto que necesitamos, al contenedor\nCOPY index.php ./index.php\n</code></pre> <ul> <li>Ahora creamos el archivo <code>./Docker/ladp-demo.conf</code>, que es la configuraci\u00f3n LADP. Las directivas PassEnv al principio del archivo nos permiten omitir credenciales y pasarlas  luego como variables de entorno al correr el contenedor.</li> </ul> <pre><code># ./Docker/ldap-demo.conf\nPassEnv LDAP_BIND_ON\nPassEnv LDAP_PASSWORD\nPassEnv LDAP_URL\n&lt;AuthnProviderAlias ldap demo&gt;\n    AuthLDAPBindDN ${LDAP_BIND_ON}\n    AuthLDAPBindPassword ${LDAP_PASSWORD}\n    AuthLDAPURL ${LDAP_URL}\n&lt;/AuthnProviderAlias&gt; \n</code></pre> <ul> <li>Creamos un nuevo archivo llamado <code>.htacces</code>:</li> </ul> <pre><code># ./.htaccess\nAuthBasicProvider demo\nAuthType Basic\nAuthName \"Protected Area\"\nRequire valid-user\n</code></pre> <ul> <li>Por \u00faltimo ejecutaremos el siguiente comando para que docker cree la imagen.</li> </ul> <pre><code>docker build \\\n    -t docker-ldap \\\n    -f ./Docker/Dockerfile \\\n    .\n</code></pre> <ul> <li>Una vez creada la imagen ejecutaremos el contenedor indicando las credenciales de nuestra cuenta LDAP mediante variables de entorno con la flag -e. Para este caso, vamos a probar un servidor LDAP externo.</li> </ul> <pre><code>docker run \\\n    -p 3000:80 \\\n    --name ldap_demo \\\n    -e LDAP_BIND_ON='cn=read-only-admin,dc=example,dc=com' \\\n    -e LDAP_PASSWORD='password' \\\n    -e LDAP_URL='LDAP://ldap.forumsys.com/dc=example,dc=com' \\\n    docker-ldap\n</code></pre> <ul> <li>No nos queda m\u00e1s que ir a http://IP-M\u00e1q-Debian:3000/demo. Si todo ha ido bien, nos solicitar\u00e1 nuestras credenciales para iniciar sesion.</li> </ul>"},{"location":"Proyecto-Fct/Decripcion-Proyecto/","title":"1. Implementaci\u00f3n del proyecto","text":"<p>El proyecto de SportConnect se divide en 2 bloques principales, el FrontEnd y el Backend cada uno con sus necesidades y requisitos</p>"},{"location":"Proyecto-Fct/Decripcion-Proyecto/#instalacion-del-frontend","title":"Instalaci\u00f3n del frontEnd","text":"<p>Para realizar una instalaci\u00f3n local del FrontEnd primero necesitaremos clonar el repositorio. Esto lo haremos con el siguiente comando:</p> <pre><code>git clone https://github.com/Alexcoro13/Frontend-Fct.git\n</code></pre> <p></p> <p>Una vez hemos clonado el repositorio entraremos en el directorio y ejecutaremos el siguiente comando:</p> <pre><code>npm install\n</code></pre> <p>Nota</p> <p>Este comando instalara todas las dependencias del proyecto y creara todos los archivos necesarios para su funcionamento</p> <p></p> <p>Tras instalar todas las dependencias del proyecto podremos ejecutar</p> <pre><code>npm run dev\n</code></pre> <p>Para ejecutar la aplicaci\u00f3n en nuestra m\u00e1quina local.</p> <p></p> <p>Y como podemos ver, ya estariamos ejecutando el frontend en nuestro equipo de manera local.</p> <p></p> <p>Nota</p> <p>Como aun no hemos instalado el BackEnd solo podremos acceder a la parte publica de la web, ya que no podremos iniciar sesi\u00f3n ni registranos</p>"},{"location":"Proyecto-Fct/Decripcion-Proyecto/#configuracion-archivo-env","title":"Configuraci\u00f3n archivo .env","text":"<p>Tras haber instalado correctamente el FrontEnd deberemos prepara un archivo .env con la siguiente variable:</p> <pre><code>NEXT_PUBLIC_API_BASE_URL = \"http://localhost:80\"\n</code></pre> <p>Esta variable nos permite cambiar la direcci\u00f3n a la que apuntan nuestra peticiones, para facilitar el desarrollo y el despliegue.</p>"},{"location":"Proyecto-Fct/Decripcion-Proyecto/#instalacion-backend","title":"Instalaci\u00f3n BackEnd","text":"<p>Atenci\u00f3n</p> <p>El BackEnd de SportConenct esta desarrollado con laravel sail, para el cual es necesario tener instalado docker</p> <p>Al igual que en el FrontEnd aqu\u00ed tambien necesitaremos clonar el repositorio con el siguiente comando:</p> <pre><code>git clone https://github.com/Alexcoro13/Backend-Fct.git\n</code></pre> <p></p> <p>Una vez clonado el repositorio iremos al directorio y ejecutaremos:</p> <pre><code>composer install\n</code></pre> <p>As\u00ed composer nos instalara al igual que npm todas las dependencias del proyecto. Y nos deberia de mostrar esto.</p> <p></p> <p>Alias</p> <p>Por defecto para ejecutar comandos de sail hace falta introducir <code>vendor/bin/sail up -d</code> lo cual lo vuelve un poco tedioso. Es por esto que es recomendable establecer una alias en la configuraci\u00f3n de tu shell ubicado en tu directorio <code>Home</code> (~/.zshrc o ~/.bashrc).</p> <p>Por lo tanto con a\u00f1adir esta linea en la configuraci\u00f3n de tu shell, podras ejecutar comandos sail mucho m\u00e1s facil.</p> <pre><code>alias sail='sh $([ -f sail ] &amp;&amp; echo sail || echo vendor/bin/sail)'\n</code></pre> <p>Ahora simplemente nos quedar\u00eda ejecutar:</p> <pre><code>sail up -d\n</code></pre> <p>Para lanzar los contenedores con la aplicaci\u00f3n  y:</p> <pre><code>sail down\n</code></pre> <p>Para parar los contenedores cuando queremos.</p> <p></p> <p>Aun que como se puede ver al lanzar los contenedores Docker nos avisa que hace falta el archivo .env para que todo funcione correctamente. Asi que pongamos con ello.</p>"},{"location":"Proyecto-Fct/Decripcion-Proyecto/#configuracion-env","title":"Configuraci\u00f3n .env","text":"<p>El proyecto por defecto tra un archivo .env de ejemplo con todas las variables que se usan, a pesar de esto para mantener la seguridad algunas variables no contienen datos reales y se necesitar\u00e1 cambiarlas:</p> <pre><code>SAIL_XDEBUG_MODE=debug\nSAIL_XDEBUG_CONFIG=\"client_host=host.docker.internal start_with_request=yes\"\n\nAPP_NAME=sportconnect\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_URL=http://localhost\n\nAPP_LOCALE=en\nAPP_FALLBACK_LOCALE=en\nAPP_FAKER_LOCALE=en_US\n\nAPP_MAINTENANCE_DRIVER=file\n# APP_MAINTENANCE_STORE=database\n\nPHP_CLI_SERVER_WORKERS=4\n\nBCRYPT_ROUNDS=12\n\nLOG_CHANNEL=stack\nLOG_STACK=single\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\n# Conexi\u00f3n desarrollo servicio posgresql\nDB_CONNECTION=pgsql\nDB_HOST=pgsql\nDB_PORT=5432\nDB_DATABASE=laravel\nDB_USERNAME=sail\nDB_PASSWORD=localhost\n\nSESSION_DRIVER=cookie\nSESSION_LIFETIME=120\nSESSION_ENCRYPT=false\nSESSION_PATH=/\nSESSION_DOMAIN=null\n\nBROADCAST_CONNECTION=log\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=database\n\nCACHE_STORE=database\n# CACHE_PREFIX=\n\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_CLIENT=phpredis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\n# Proveedor de correo electr\u00f3nico\nMAIL_MAILER=smtp\nMAIL_SCHEME=null\nMAIL_HOST=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=\"tucorreo\"\nMAIL_PASSWORD=\"tucontrase\u00f1a\"\nMAIL_FROM_ADDRESS=\"tudirecciondecorreo\"\nMAIL_FROM_NAME=\"SportConnect\"\n\nVITE_APP_NAME=\"${APP_NAME}\"\n\nSANCTUM_STATEFUL_DOMAINS=localhost:3000\n\n# Esta variable es para cuando el usuario verifica su cuenta, sea redirigido a la p\u00e1gina de inicio\nFRONTEND_URL=http://localhost:3000/home\n\n# Configuraci\u00f3n de Cloudinary\nCLOUDINARY_UPLOAD_PRESET=\"cloudnary_upload_preset\"\n\nCLOUDINARY_CLOUD_NAME=\"cloundname\"\nCLOUDINARY_API_KEY=\"apikey\"\nCLOUDINARY_API_SECRET=\"apisecret\"\n</code></pre> <p>Variables que necesitan cambio</p> <p>Las variables que necesitan ser cambiadas son todas las relacionadas con <code>CLOUDINARY</code>, y las variables de <code>MAIL</code></p> <p>Por \u00faltimo necesitaremos hacer un par de cosas m\u00e1s antes de tener nuestro BackEnd funcionando y ser\u00e1 ejecutar los siguientes comandos</p> <pre><code>sail artisan migrate\nsail artisan db:seed\n</code></pre> <p>Para que se creen las tablas y se poble la base de datos con informaci\u00f3n.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/","title":"2. EndPoints Api","text":"<p>Para el sistema de autenticaci\u00f3n se ha usado Laravel Sactum el cual provee un sistema de autenticaci\u00f3n simple para aplicaciones m\u00f3viles, y APIS basadas en el uso de tokens simples.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#obtener-un-token-de-autenticacion-auth","title":"Obtener un token de autenticaci\u00f3n (Auth)","text":""},{"location":"Proyecto-Fct/Endpoints-Api/#registro-apiregister","title":"Registro - /api/register","text":"<p>Para obtener un token de autenticaci\u00f3n necesitamos habernos registrado previamente en el sistema. Para esto accederemos al Endpoint mediante una petici\u00f3n <code>POST</code> a <code>/api/register</code> en donde deberemos introducir los siguientes campos para crear una solicitud v\u00e1lida.</p> <pre><code>{\n    \"nombre\": \"tunombre\",\n\n    \"apellidos\": \"tuapellido\",\n\n    \"email\": \"correo@gmail.com\",\n\n    \"password\": \"tucontrase\u00f1a\",\n\n    \"nombre_usuario\": \"tunombredeusuario\"\n}\n</code></pre> <p>Una vez hecha esta petici\u00f3n el servidor nos devolver\u00e1 una respuesta con estado 201 Created, si todo ha ido bien y la siguiente informaci\u00f3n:</p> <pre><code>{\n\"data\": {\n    \"nombre\": \"tunombre\",\n\n    \"apellidos\": \"tuapellido\",\n\n    \"email\": \"correo@gmail.com\",\n\n    \"nombre_usuario\": \"tunombredeusuario\"\n\n    \"updated_at\": \"2025-06-11T08:13:06.000000Z\",\n\n    \"created_at\": \"2025-06-11T08:13:06.000000Z\",\n\n    \"id\": 63\n    }\n}\n</code></pre> <p>En caso de haber cualquier problema con los campos en la petici\u00f3n nos devolver\u00e1 una respuesta con estado 422 Unprocesable Entity y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"message\": \"The email has already been taken. (and 2 more errors)\",\n\n    \"errors\": {\n\n        \"email\": [\n\n            \"The email has already been taken.\"\n\n        ],\n\n        \"password\": [\n\n            \"La contrase\u00f1a es un dato obligatorio\"\n\n        ],\n\n        \"nombre_usuario\": [\n\n            \"El nombre de usuario ya existe\"\n\n        ]\n\n    }\n}\n</code></pre> <p>Una vez registrados, el servidor generar\u00e1 un token de verificaci\u00f3n de correo electr\u00f3nico el cual se mandara en un enlace al correo electr\u00f3nico que se registr\u00f3. </p> <p></p> <p>Una vez aqu\u00ed el usuario solo tendr\u00e1 que hacer clic en el enlace de verificar correo el cual mandar\u00e1 al usuario a trav\u00e9s de una p\u00e1gina del servidor en donde se marca el proceso de verificar correo como completado y redirige al usuario hacia el frontEnd de la p\u00e1gina.</p> <p>Una vez completados estos 2 pasos, ya habr\u00edamos conseguido registrar un usuario de manera exitosa en el sistema.</p> <p>Atenci\u00f3n</p> <p>Si se intentase acceder a cualquier otro Endpoint sin realizar este paso el servidor no te dar\u00e1 acceso a ninguna ruta protegida. Lo mismo pasa si intentases entrar en alguna ruta protegida del frontend sin verificar tu Email. </p>"},{"location":"Proyecto-Fct/Endpoints-Api/#login-apilogin","title":"LogIn - /api/login","text":"<p>Una vez tenemos un usuario registrado, deberemos mandar una petici\u00f3n <code>POST</code> a <code>/api/login</code> con los siguientes campos email y password</p> <p>El body de la petici\u00f3n ser ver\u00eda algo as\u00ed:</p> <pre><code>{\n    \"email\": \"alex.coronetas@gmail.com\",\n\n    \"password\": \"usuario\"\n}\n</code></pre> <p>Si faltase alguno de los campos o estos, contuviesen informaci\u00f3n err\u00f3nea, v\u00e9ase contrase\u00f1a o email incorrectos, el servidor nos devolver\u00e1 una respuesta con estado 401 Unauthorized.</p> <p>En caso de ir todo bien, el servidor nos devolver\u00e1 2 cosas en la repuesta: </p> <ol> <li>La cookie encriptada con el token de Laravel Sactum:</li> </ol> <p>Info</p> <p>Esta cookie que nos devuelve el servidor es una cookie segura, marcada como HTTPOnly, samesite none. La cual esta encriptada para que no se pueda ver el token que hay dentro de la misma.</p> <ol> <li>Informaci\u00f3n del usuario con el cual hemos iniciado sesi\u00f3n:</li> </ol> <pre><code>{\n    \"user\": {\n\n    \"id\": 61,\n\n    \"nombre\": \"alex\",\n\n    \"apellidos\": \"Coronado\",\n\n    \"email\": \"alex.coronetas@gmail.com\",\n\n    \"nombre_usuario\": \"Alexcoro\",\n\n    \"visibilidad\": true,\n\n    \"estado\": true,\n\n    \"email_verified_at\": \"2025-06-08T22:37:22.000000Z\",\n\n    \"avatar\": \"https://res.cloudinary.com/dok6y8wwp/image/upload/v1749499625/z4vku2db7wdjxr1lqlqy.png\",\n\n    \"created_at\": \"2025-06-08T22:37:00.000000Z\",\n\n    \"updated_at\": \"2025-06-09T20:07:06.000000Z\"\n\n    }\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#logout-apilogout","title":"LogOut - /api/logout","text":"<p>Una vez que ya hemos iniciado sesi\u00f3n necesitaremos cerrarla. Para esto haremos uso de la ruta <code>/api/logout</code> y con una simple petici\u00f3n <code>GET</code> cerraremos sesi\u00f3n ya que no necesitamos pasar ning\u00fan campo para realizar esta acci\u00f3n ya que el servidor en base a la sesi\u00f3n iniciada obtendr\u00e1 tu token de acceso y lo  borrar\u00e1 junto a las cookies de sesi\u00f3n del navegador.</p> <pre><code>{\n    \"message\": \"Successfully logged out\"\n}\n</code></pre> <p>Si la petici\u00f3n es exitosa el servidor nos devolver\u00e1 este mensaje para darnos un poco mas de contexto.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#comprobar-sesion-apiverifysession","title":"Comprobar sesi\u00f3n - /api/verifySession","text":"<p>Esta ruta nos permite realizar una petici\u00f3n <code>GET</code> a <code>/api/verifySession</code> al servidor para comprobar si la sesi\u00f3n sigue activa el cual devuelve true o false. La raz\u00f3n de ser de esta ruta es meramente para comprobar que cuando accedemos a una nueva p\u00e1gina del FrontEnd como <code>/workouts</code> tenemos una sesi\u00f3n activa.</p> <pre><code>{\n    \"verified\": true\n}\n</code></pre> <p>Nota</p> <p>Esta ruta no se encarga de redirigir a los usuarios en caso de que no est\u00e9n verificados simplemente devuelve true o false si el usuario tiene o no una cookie de autenticaci\u00f3n v\u00e1lida.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#tabla-usuarios","title":"Tabla Usuarios","text":"<p>Para el manejo de la tabla de usuarios tenemos 5 endpoints:</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-all-users-apiusuarios","title":"Get-All-Users - /api/usuarios","text":"<p>Este Endpoint devuelve un array con todos los usuarios registrados en la base de datos. <code>GET /API/USUARIOS</code></p> <p>Ejemplo de respuesta:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n\n            \"nombre\": \"Cecile\",\n\n            \"apellidos\": \"Gibson\",\n\n            \"email\": \"vernie81@example.org\",\n\n            \"nombre_usuario\": \"ariane15\",\n\n            \"visibilidad\": true,\n\n            \"estado\": true,\n\n            \"email_verified_at\": \"2025-06-08T22:36:37.000000Z\",\n\n            \"avatar\": \"https://picsum.photos/200/300?grayscale\",\n\n            \"created_at\": \"2025-06-08T22:36:37.000000Z\",\n\n            \"updated_at\": \"2025-06-08T22:36:37.000000Z\"\n\n        },\n\n        {\n\n            \"id\": 2,\n\n            \"nombre\": \"Braulio\",\n\n            \"apellidos\": \"Kling\",\n\n            \"email\": \"crippin@example.org\",\n\n            \"nombre_usuario\": \"rozella.leannon\",\n\n            \"visibilidad\": true,\n\n            \"estado\": true,\n\n            \"email_verified_at\": \"2025-06-08T22:36:37.000000Z\",\n\n            \"avatar\": \"https://picsum.photos/200/300?grayscale\",\n\n            \"created_at\": \"2025-06-08T22:36:37.000000Z\",\n\n            \"updated_at\": \"2025-06-08T22:36:37.000000Z\"\n\n        }\n    ],\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-user-apiusuariosid","title":"Get-User - /api/usuarios/{id}","text":"<p>La ruta <code>GET /API/USUARIOS/{ID}</code> devuelve un json con la informaci\u00f3n del usuario del cual se ha hecho la petici\u00f3n.</p> <p>Ejemplo respuesta para petici\u00f3n <code>GET /API/USUARIOS/61</code>:</p> <pre><code>{\n    \"data\": {\n\n        \"id\": 61,\n\n        \"nombre\": \"alex\",\n\n        \"apellidos\": \"Coronado\",\n\n        \"email\": \"alex.coronetas@gmail.com\",\n\n        \"nombre_usuario\": \"Alexcoro\",\n\n        \"visibilidad\": true,\n\n        \"estado\": true,\n\n        \"email_verified_at\": \"2025-06-08T22:37:22.000000Z\",\n\n        \"avatar\": \"https://res.cloudinary.com/dok6y8wwp/image/upload/v1749499625/z4vku2db7wdjxr1lqlqy.png\",\n\n        \"created_at\": \"2025-06-08T22:37:00.000000Z\",\n\n        \"updated_at\": \"2025-06-09T20:07:06.000000Z\",\n\n        \"propietario\": true\n\n    },\n\n    \"message\": \"User obtained successfully\"\n}\n</code></pre> <p>En caso de que el id introducido no existiese en la base de datos el servidor devolver\u00eda una respuesta con un c\u00f3digo 404 Not Found y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"error\": \"No query results for model [App\\\\Models\\\\Usuario] 80\",\n\n    \"message\": \"User not found\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#update-user-apiusuariosupdate61","title":"Update-User - /api/usuarios/update/61","text":"<p>Para actualizar de la informaci\u00f3n de un usuario lo haremos mediante una petici\u00f3n POST pues para poder mandar una imagen para actualizar el campo avatar, la petici\u00f3n debe incluir la cabecera Content-Type: multipart/form-data la cual no funciona en peticiones PUT y PATCH</p> <p>Los campos que se pueden actualizar son los siguientes:</p> <ul> <li>Avatar -&gt; Imagen</li> </ul> <p>Nota</p> <p>Las imagenes se procesan y se suben a cloudinary para su almacenamiento.</p> <ul> <li>Nombre -&gt; String</li> <li>Apellidos -&gt; String</li> <li>Email -&gt; Email</li> <li>Nombre usuario -&gt; String</li> <li>Visibilidad -&gt; Boolean</li> </ul> <p>A la hora de formar la petici\u00f3n no hace falta que todos los campos esten presentes, es decir campo que el campo que no se encuentre en la petici\u00f3n no se actualizar\u00e1.</p> <p>Ejemplo de response: <pre><code>{\n    \"data\": {\n        \"id\": 61,\n        \"nombre\": \"alex\",\n        \"apellidos\": \"Coronado\",\n        \"email\": \"alex.coronetas@gmail.com\",\n        \"nombre_usuario\": \"Alexcoro\",\n        \"visibilidad\": true,\n        \"estado\": true,\n        \"email_verified_at\": \"2025-06-08T22:37:22.000000Z\",\n        \"avatar\": \"https://res.cloudinary.com/dok6y8wwp/image/upload/v1749499625/z4vku2db7wdjxr1lqlqy.png\",\n        \"created_at\": \"2025-06-08T22:37:00.000000Z\",\n        \"updated_at\": \"2025-06-09T20:07:06.000000Z\"\n    },\n    \"message\": \"User updated successfully\"\n}\n</code></pre></p>"},{"location":"Proyecto-Fct/Endpoints-Api/#delete-user-apiusuariosid","title":"Delete User - /api/usuarios/{id}","text":"<p>Para borrar un usuario de la base de datos usaremos la ruta DELETE - /api/usuarios/{id}, el servidor tratar\u00e1 de buscar la id de usuario y lo borrar\u00e1 de la base de datos.</p> <p>Ejemplo de response:</p> <pre><code>{\n    \"data\": null,\n    \"message\": \"User deleted successfully\"\n}\n</code></pre> <p>En caso de que el usuario no exista el servidor nos devolvera una respuesta con estado 409 Conflict y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"error\": \"No query results for model [App\\\\Models\\\\Usuario] 60\",\n    \"message\": \"Error deleting user\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#changepassword-apiusuarioschangepassword","title":"ChangePassword - /api/usuarios/changePassword","text":"<p>Para cambiar la contrase\u00f1a de un usuario se hace mediante el endpoint <code>POST - /api/usuarios/changePassword</code></p> <p>Y se necesita mandar la contrase\u00f1a antigua y la nueva, no hace indicar el id de usuario ya que el servidor la obtiene del token de autenticacion que esta mandado la peticion permitiendo as\u00ed que el usuario que quiere cambiar la contrase\u00f1a solo pueda cambiar su contrase\u00f1a.</p> <p>Ejemplo de petici\u00f3n:</p> <pre><code>{\n    \"old_password\": \"usuario\",\n    \"new_password\": \"prueba123\"\n}\n</code></pre> <p>Ejemplo de respuesta: <pre><code>{\n    \"data\": {\n        \"id\": 61,\n        \"nombre\": \"alex\",\n        \"apellidos\": \"Coronado\",\n        \"email\": \"alex.coronetas@gmail.com\",\n        \"nombre_usuario\": \"Alexcoro\",\n        \"visibilidad\": true,\n        \"estado\": true,\n        \"email_verified_at\": \"2025-06-08T22:37:22.000000Z\",\n        \"avatar\": \"https://res.cloudinary.com/dok6y8wwp/image/upload/v1749499625/z4vku2db7wdjxr1lqlqy.png\",\n        \"created_at\": \"2025-06-08T22:37:00.000000Z\",\n        \"updated_at\": \"2025-06-11T11:25:38.000000Z\"\n    },\n    \"message\": \"Password changed successfully\"\n}\n</code></pre></p> <p>Create user</p> <p>El controlador de la tabla usuario no permite crear directamente un usuario, para esto se debe de seguir el proceso de registro.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#tabla-posts","title":"Tabla Posts","text":"<p>Para el manejo de la tabla de posts tenemos 6 endpoints:</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-all-posts-apiposts","title":"Get-All-Posts - /api/posts","text":"<p>Este Endpoint devuelve un array con todos los posts que hay en la base de datos. <code>GET /api/posts</code></p> <p>Ejemplo de respuesta:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"titulo\": \"Miss\",\n            \"texto\": \"Five, 'and I'll tell you more than nine feet high, and her eyes filled with cupboards and book-shelves; here and there was no label this time the Queen till she fancied she heard the Rabbit angrily.\",\n            \"imagen\": \"https://picsum.photos/3000/1000\",\n            \"id_usuario\": 1,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        },\n        {\n            \"id\": 2,\n            \"titulo\": \"Mr.\",\n            \"texto\": \"The Fish-Footman began by producing from under his arm a great hurry to change them--' when she heard a little before she got into it), and handed back to her: its face in some book, but I hadn't.\",\n            \"imagen\": \"https://picsum.photos/3200/800\",\n            \"id_usuario\": 2,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        }\n    ],\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#create-post-apiposts","title":"Create-Post - /api/posts","text":"<p>Para crear un posts lo haremos mediante una petici\u00f3n POST <code>/api/posts</code> pues para poder mandar una imagen para actualizar el campo imagen, la petici\u00f3n debe incluir la cabecera Content-Type: multipart/form-data.</p> <p>Los campos a enviar en la petici\u00f3n son:</p> <ul> <li>Titulo -&gt; String - Required</li> <li>Texto -&gt; String - Required</li> <li>Imagen -&gt; File - Nullable</li> </ul> <p>Ejemplo de response: <pre><code>{\n    \"data\": {\n        \"titulo\": \"Holaaaa\",\n        \"texto\": \"Pruebaaaa\",\n        \"id_usuario\": 61,\n        \"updated_at\": \"2025-06-11T11:42:41.000000Z\",\n        \"created_at\": \"2025-06-11T11:42:41.000000Z\",\n        \"id\": 65\n    }\n}\n</code></pre></p> <p>Id de usuario</p> <p>Aqui tampoco hace falta pasar el id de usuario que crea el post ya que el servidor reconoce quien hace la petici\u00f3n y asigna esta id a la id de usuario, permitiendo que los usuarios solo puedan crear posts autenticados. </p> <p>Imagen</p> <p>Al igual que con update usuario la imagen se procesa y se almacena en cloudinary para evitar tener que almacenarlo en el servidor.</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-post-apipostsid","title":"Get-Post - /api/posts/{id}","text":"<p>La ruta <code>GET /api/posts/{ID}</code> devuelve un json con la informaci\u00f3n del post del cual se ha hecho la petici\u00f3n.</p> <p>Ejemplo respuesta para petici\u00f3n <code>GET /api/post/1</code>:</p> <pre><code>{\n    {\n    \"data\": {\n        \"id\": 1,\n        \"titulo\": \"Miss\",\n        \"texto\": \"Five, 'and I'll tell you more than nine feet high, and her eyes filled with cupboards and book-shelves; here and there was no label this time the Queen till she fancied she heard the Rabbit angrily.\",\n        \"imagen\": \"https://picsum.photos/3000/1000\",\n        \"id_usuario\": 1,\n        \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n        \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n    },\n    \"message\": \"\"\n}\n}\n</code></pre> <p>En caso de que el id introducido no existiese en la base de datos el servidor devolver\u00eda una respuesta con un c\u00f3digo 404 Not Found y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"data\": null,\n    \"message\": \"Post not found\",\n    \"error\": \"No query results for model [App\\\\Models\\\\Post] 500\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#delete-posts-apipostsid","title":"Delete posts - /api/posts/{id}","text":"<p>Para borrar un post de la base de datos usaremos la ruta DELETE - /api/posts/{id}, el servidor tratar\u00e1 de buscar la id del post y lo borrar\u00e1 de la base de datos.</p> <p>Ejemplo de response:</p> <pre><code>{\n    \"data\": null,\n    \"message\": \"Post deleted successfully\"\n}\n</code></pre> <p>En caso de que el post no exista el servidor nos devolver\u00e1 una respuesta con estado 500 Internal Server Error y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"message\": \"Error deleting post\",\n    \"error\": \"No query results for model [App\\\\Models\\\\Post] 2\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-latest-posts-apipostslatestnumberofposts","title":"Get Latest Posts - /api/posts/latest/{numberOfPosts}","text":"<p>Get Latest Post nos permite obtener X numero de posts de manera aletora para mostrarlos en el home de nuestra APP.</p> <p>Ejemplo de response:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": 19,\n            \"titulo\": \"Dr.\",\n            \"texto\": \"White Rabbit. She was a most extraordinary noise going on within--a constant howling and sneezing, and every now and then turned to the beginning again?' Alice ventured to say. 'What is his sorrow?'.\",\n            \"imagen\": \"https://picsum.photos/3200/800\",\n            \"id_usuario\": 19,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        },\n        {\n            \"id\": 53,\n            \"titulo\": \"Prof.\",\n            \"texto\": \"Majesty,' the Hatter continued, 'in this way:-- \\\"Up above the world you fly, Like a tea-tray in the pictures of him), while the Mock Turtle had just begun 'Well, of all this time. 'I want a clean.\",\n            \"imagen\": null,\n            \"id_usuario\": 53,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        },\n        {\n            \"id\": 45,\n            \"titulo\": \"Prof.\",\n            \"texto\": \"Cat, 'a dog's not mad. You grant that?' 'I suppose so,' said the Mock Turtle in a low trembling voice, '--and I hadn't mentioned Dinah!' she said aloud. 'I must be kind to them,' thought Alice, as.\",\n            \"imagen\": null,\n            \"id_usuario\": 45,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        },\n        {\n            \"id\": 17,\n            \"titulo\": \"Miss\",\n            \"texto\": \"Alice went on without attending to her, And mentioned me to introduce some other subject of conversation. While she was quite silent for a little door into that lovely garden. I think that proved it.\",\n            \"imagen\": \"https://picsum.photos/2500/1200\",\n            \"id_usuario\": 17,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        },\n        {\n            \"id\": 40,\n            \"titulo\": \"Mrs.\",\n            \"texto\": \"Alice quietly said, just as she could, and soon found an opportunity of saying to herself 'Now I can reach the key; and if it makes me grow smaller, I suppose.' So she set to work nibbling at the.\",\n            \"imagen\": \"https://picsum.photos/3000/1000\",\n            \"id_usuario\": 40,\n            \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n            \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n        }\n    ],\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-post-by-userid-apipostsusuarioid","title":"Get Post By UserId - /api/posts/usuario/{id}","text":"<p>Get post by userId nos permite obtener todos los posts de un usuario pasando como parametro el id del mismo.</p> <p>Ejemplo response: <pre><code>{\n    \"data\": [\n        {\n            \"id\": 62,\n            \"titulo\": \"Prueba\",\n            \"texto\": \"13qweq\",\n            \"imagen\": \"https://res.cloudinary.com/dok6y8wwp/image/upload/v1749462324/yj6kg9xxacgqmoghs3h9.webp\",\n            \"id_usuario\": 61,\n            \"created_at\": \"2025-06-09T09:45:25.000000Z\",\n            \"updated_at\": \"2025-06-09T09:45:25.000000Z\"\n        },\n        {\n            \"id\": 64,\n            \"titulo\": \"Prueba2\",\n            \"texto\": \"Holaa\",\n            \"imagen\": null,\n            \"id_usuario\": 61,\n            \"created_at\": \"2025-06-10T07:11:23.000000Z\",\n            \"updated_at\": \"2025-06-10T07:11:23.000000Z\"\n        },\n        {\n            \"id\": 65,\n            \"titulo\": \"Holaaaa\",\n            \"texto\": \"Pruebaaaa\",\n            \"imagen\": null,\n            \"id_usuario\": 61,\n            \"created_at\": \"2025-06-11T11:42:41.000000Z\",\n            \"updated_at\": \"2025-06-11T11:42:41.000000Z\"\n        }\n    ],\n    \"message\": \"\"\n}\n</code></pre></p> <p>En caso de que el usuario no tenga ningun post en la base de datos el servidor devuelve un array vacio sin ning\u00fan post</p> <pre><code>{\n    \"data\": [],\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#tabla-entrenamientos","title":"Tabla Entrenamientos","text":"<p>Para manejar la tabla entrenamientos tenemos 6 endpoints:</p>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-all-entrenamientos-apientrenamientos","title":"Get All Entrenamientos - /api/entrenamientos","text":"<p>Este Endpoint devuelve un array con todos los entrenamientos que hay en la base de datos. <code>GET /api/entrenamientos</code></p> <p>Ejemplo de respuesta:</p> <pre><code>{\n    \"data\": [\n        {\n            \"id\": 5,\n            \"nombre\": \"Pruebaaaaa\",\n            \"ejercicios\": [\n                {\n                    \"name\": \"3/4 Sit-Up\",\n                    \"primaryMuscles\": [\n                        \"abdominals\"\n                    ],\n                    \"series\": [\n                        {\n                            \"peso\": 0,\n                            \"repeticiones\": 0,\n                            \"acabado\": true\n                        }\n                    ],\n                    \"image\": \"3_4_Sit-Up/0.jpg\"\n                }\n            ],\n            \"descripcion\": \"Esto es una pruebaaaa\",\n            \"duracion\": 120,\n            \"id_usuario\": 61,\n            \"created_at\": \"2025-06-10T06:35:20.000000Z\",\n            \"updated_at\": \"2025-06-10T06:35:20.000000Z\"\n        },\n        {\n            \"id\": 6,\n            \"nombre\": \"Prueba 40\",\n            \"ejercicios\": [\n                {\n                    \"name\": \"Seated Band Hamstring Curl\",\n                    \"primaryMuscles\": [\n                        \"hamstrings\"\n                    ],\n                    \"series\": [\n                        {\n                            \"peso\": 20,\n                            \"repeticiones\": 20,\n                            \"acabado\": true\n                        },\n                        {\n                            \"acabado\": true,\n                            \"repeticiones\": 40,\n                            \"peso\": 30\n                        }\n                    ],\n                    \"image\": \"Seated_Band_Hamstring_Curl/0.jpg\"\n                }\n            ],\n            \"descripcion\": \"Esto es una prueba\",\n            \"duracion\": 14,\n            \"id_usuario\": 61,\n            \"created_at\": \"2025-06-10T09:05:02.000000Z\",\n            \"updated_at\": \"2025-06-10T09:05:02.000000Z\"\n        },\n    ],\n    \"message\": \"\"\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#create-post-apiposts_1","title":"Create-Post - /api/posts","text":"<p>Para crear un posts lo haremos mediante una petici\u00f3n POST <code>/api/entrenamientos</code></p> <p>Los campos a enviar en la petici\u00f3n son:</p> <ul> <li>nombre -&gt; String - Required</li> <li>descripcion -&gt; String - Required</li> <li>ejercicios -&gt; Array - Required</li> <li>duracion -&gt; number - Required</li> </ul> <p>Ejemplo de request:</p> <pre><code>{\n    \"nombre\": \"Chest, triceps, Shouldres\",\n    \"descripcion\": \"This workout is the best leg workout for beginners and people without experience\",\n    \"ejercicios\":\n     [\n        {\n            \"name\": \"Seated Band Hamstring Curl\",\n                \"primaryMuscles\": [\n                    \"hamstrings\"\n                ],\n                \"series\": [\n                    {\n                        \"peso\": 20,\n                        \"repeticiones\": 20,\n                        \"acabado\": true\n                    },\n                    {\n                        \"acabado\": true,\n                        \"repeticiones\": 40,\n                        \"peso\": 30\n                    }\n                ],\n                \"image\": \"Seated_Band_Hamstring_Curl/0.jpg\"\n            }\n        ],\n    \"duracion\": 120\n}\n</code></pre> <p>Campo ejercicios</p> <p>Es importante que el campo ejercicios contenga dentro del array a un ejercicio con la siguiente estructura: <pre><code>{\n    \"name\": \"Seated Band Hamstring Curl\",\n        \"primaryMuscles\": [\n            \"hamstrings\"\n        ],\n        \"series\": [\n            {\n                \"peso\": 20,\n                \"repeticiones\": 20,\n                \"acabado\": true\n            },\n            {\n                \"acabado\": true,\n                \"repeticiones\": 40,\n                \"peso\": 30\n            }\n        ],\n        \"image\": \"Seated_Band_Hamstring_Curl/0.jpg\"\n}\n</code></pre> Ya que nos permite recorrer cada ejercicio en la web de una manera optima.</p> <p>Ejemplo de response 201 Created: <pre><code>{\n    \"data\": {\n        \"ejercicios\": [\n            {\n                \"name\": \"Seated Band Hamstring Curl\",\n                \"primaryMuscles\": [\n                    \"hamstrings\"\n                ],\n                \"series\": [\n                    {\n                        \"peso\": 20,\n                        \"repeticiones\": 20,\n                        \"acabado\": true\n                    },\n                    {\n                        \"acabado\": true,\n                        \"repeticiones\": 40,\n                        \"peso\": 30\n                    }\n                ],\n                \"image\": \"Seated_Band_Hamstring_Curl/0.jpg\"\n            }\n        ],\n        \"descripcion\": \"This workout is the best leg workout for beginners and people without experience\",\n        \"duracion\": 120,\n        \"id_usuario\": 61,\n        \"nombre\": \"Chest, triceps, Shouldres\",\n        \"updated_at\": \"2025-06-11T12:27:52.000000Z\",\n        \"created_at\": \"2025-06-11T12:27:52.000000Z\",\n        \"id\": 8\n    },\n    \"message\": \"Workout created successfully\"\n}\n</code></pre></p> <p>Id de usuario</p> <p>Aqui tampoco hace falta pasar el id de usuario que crea el post ya que el servidor reconoce quien hace la petici\u00f3n y asigna esta id a la id de usuario, permitiendo que los usuarios solo puedan crear posts autenticados. </p> <p>En caso de no introducir los campos correctamente el servidor nos devolver\u00e1 un c\u00f3digo 422 Unprocessable Content y nos indicar\u00e1 que problemas hay con nuestra petici\u00f3n.</p> <pre><code>{\n    \"message\": \"El nombre es un dato obligatorio (and 2 more errors)\",\n    \"errors\": {\n        \"nombre\": [\n            \"El nombre es un dato obligatorio\"\n        ],\n        \"ejercicios\": [\n            \"Los ejercicios son un dato obligatorio\"\n        ],\n        \"duracion\": [\n            \"La duraci\u00f3n es un dato obligatorio\"\n        ]\n    }\n}\n</code></pre>"},{"location":"Proyecto-Fct/Endpoints-Api/#get-entrenamiento-apipostsid","title":"Get-Entrenamiento - /api/posts/{id}","text":"<p>La ruta <code>GET /api/entrenamientos/{ID}</code> devuelve un JSON con la informaci\u00f3n del post del cual se ha hecho la petici\u00f3n.</p> <p>Ejemplo respuesta para petici\u00f3n <code>GET /api/post/1</code>:</p> <pre><code>{\n    {\n    \"data\": {\n        \"id\": 1,\n        \"titulo\": \"Miss\",\n        \"texto\": \"Five, 'and I'll tell you more than nine feet high, and her eyes filled with cupboards and book-shelves; here and there was no label this time the Queen till she fancied she heard the Rabbit angrily.\",\n        \"imagen\": \"https://picsum.photos/3000/1000\",\n        \"id_usuario\": 1,\n        \"created_at\": \"2025-06-08T22:36:38.000000Z\",\n        \"updated_at\": \"2025-06-08T22:36:38.000000Z\"\n    },\n    \"message\": \"\"\n}\n}\n</code></pre> <p>En caso de que el id introducido no existiese en la base de datos el servidor devolver\u00eda una respuesta con un c\u00f3digo 404 Not Found y la siguiente informaci\u00f3n:</p> <pre><code>{\n    \"data\": null,\n    \"message\": \"Workout not found\",\n    \"error\": \"No query results for model [App\\\\Models\\\\Entrenamiento] 100\"\n}\n</code></pre>"}]}